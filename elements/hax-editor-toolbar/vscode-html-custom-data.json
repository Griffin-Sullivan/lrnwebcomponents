{
  "version": 1,
  "tags": [
    {
      "name": "hax-editor-toolbar",
      "description": "`hax-editor-toolbar`\n`A customized toolbar (with buttons) for HAX`\n\nEvents:\n\n  * `responsive-element` {`CustomEvent<{ element: any; }>`} - \n\n  * `highlight` {`CustomEvent<boolean>`} - \n\n  * `register` {`CustomEvent<{ remove: boolean; toolbar: this; }>`} - \n\n  * `selectnode` {`CustomEvent<any>`} - \n\n  * `selectnodecontents` {`CustomEvent<any>`} - \n\n  * `selectrange` {`CustomEvent<any>`} - \n\n  * `pastefromclipboard` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `buttons` {`any[]`} - raw array of buttons\n\n  * `editor` - `rich-text-editor` element that is currently in `contenteditable` mode\n\n  * `id` {`string`} - `rich-text-editor` unique id\n\n  * `savedSelection` - current text selected range.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `registered` {`boolean`} - selection singleton\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hidden` {`boolean`} - whether toolbar is hidden\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `__promptOpen` {`boolean`} - whether prompt is open\n\n  * `__selection` - selection singleton\n\n  * `always-visible` {`boolean`} - keep toolbar visible even when not editor not focused\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `config` {`({} | {})[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `more-icon` {`string`} - icon for more button.\n\n  * `more-label` {`string`} - label for more button.\n\n  * `more-label-toggled` {`string`} - label for more button when toggled.\n\n  * `more-show-text-label` {`boolean`} - show text label for more button.\n\n  * `responsive-size` {`string`} - size of editor.\n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `__clickableElements` - Tracks inline widgets that require selection data\n\n  * `shortcutKeys` {`any[]`} - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperties:\n\n  * `tag` {`string`} - \n\n  * `defaultConfig` {`({ label: string; type: string; buttons: { command: string; icon: string; label: string; shortcutKeys: string; type: string; }[]; collapsedUntil?: undefined; icon?: undefined; symbolTypes?: undefined; } | { ...; } | { ...; } | { ...; } | { ...; })[]`} - \n\n  * `miniConfig` {`({ label: string; type: string; buttons: ({ command: string; icon: string; label: string; toggles: boolean; type: string; collapsedUntil?: undefined; } | { collapsedUntil: string; command: string; icon: string; label: string; type: string; toggles?: undefined; })[]; collapsedUntil?: undefined; } | { ...; } | { ...; ...`} - \n\n  * `toolbarTemplate` {`TemplateResult`} - \n\n  * `buttons` {`any[]`} - raw array of buttons\n\n  * `editor` - `rich-text-editor` element that is currently in `contenteditable` mode\n\n  * `id` {`string`} - `rich-text-editor` unique id\n\n  * `savedSelection` - current text selected range.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `registered` {`boolean`} - selection singleton\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hidden` {`boolean`} - whether toolbar is hidden\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `__promptOpen` {`boolean`} - whether prompt is open\n\n  * `__selection` - selection singleton\n\n  * `disconnected` {`boolean`} - \n\n  * `controls` - id of editor currently being controlled\n\n  * `alwaysVisible` {`boolean`} - keep toolbar visible even when not editor not focused\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `config` {`({} | {})[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `moreIcon` {`string`} - icon for more button.\n\n  * `moreLabel` {`string`} - label for more button.\n\n  * `moreLabelToggled` {`string`} - label for more button when toggled.\n\n  * `moreShowTextLabel` {`boolean`} - show text label for more button.\n\n  * `responsiveSize` {`string`} - size of editor.\n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `__clickableElements` - Tracks inline widgets that require selection data\n\n  * `shortcutKeys` {`any[]`} - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.",
      "attributes": [
        {
          "name": "buttons",
          "description": "`buttons` {`any[]`} - raw array of buttons\n\nProperty: buttons"
        },
        {
          "name": "editor",
          "description": "`editor` - `rich-text-editor` element that is currently in `contenteditable` mode\n\nProperty: editor"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - `rich-text-editor` unique id\n\nProperty: id"
        },
        {
          "name": "savedSelection",
          "description": "`savedSelection` - current text selected range.\n\nProperty: savedSelection"
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "registered",
          "description": "`registered` {`boolean`} - selection singleton\n\nProperty: registered",
          "valueSet": "v"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "__focused",
          "description": "`__focused` {`boolean`} - whether toolbar has focus\n\nProperty: __focused",
          "valueSet": "v"
        },
        {
          "name": "__hidden",
          "description": "`__hidden` {`boolean`} - whether toolbar is hidden\n\nProperty: __hidden",
          "valueSet": "v"
        },
        {
          "name": "__hovered",
          "description": "`__hovered` {`boolean`} - whether toolbar is hovered\n\nProperty: __hovered",
          "valueSet": "v"
        },
        {
          "name": "__promptOpen",
          "description": "`__promptOpen` {`boolean`} - whether prompt is open\n\nProperty: __promptOpen",
          "valueSet": "v"
        },
        {
          "name": "__selection",
          "description": "`__selection` - selection singleton\n\nProperty: __selection"
        },
        {
          "name": "always-visible",
          "description": "`always-visible` {`boolean`} - keep toolbar visible even when not editor not focused\n\nProperty: alwaysVisible\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "collapsed",
          "description": "`collapsed` {`boolean`} - is toolbar collapsed?\n\nProperty: collapsed\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "config",
          "description": "`config` {`({} | {})[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\nProperty: config\n\nDefault: [object Object],[object Object]"
        },
        {
          "name": "more-icon",
          "description": "`more-icon` {`string`} - icon for more button.\n\nProperty: moreIcon\n\nDefault: more-vert"
        },
        {
          "name": "more-label",
          "description": "`more-label` {`string`} - label for more button.\n\nProperty: moreLabel\n\nDefault: More Buttons"
        },
        {
          "name": "more-label-toggled",
          "description": "`more-label-toggled` {`string`} - label for more button when toggled.\n\nProperty: moreLabelToggled\n\nDefault: Fewer Buttons"
        },
        {
          "name": "more-show-text-label",
          "description": "`more-show-text-label` {`boolean`} - show text label for more button.\n\nProperty: moreShowTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "responsive-size",
          "description": "`responsive-size` {`string`} - size of editor.\n\nProperty: responsiveSize\n\nDefault: xs"
        },
        {
          "name": "sticky",
          "description": "`sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\nProperty: sticky\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__clickableElements",
          "description": "`__clickableElements` - Tracks inline widgets that require selection data\n\nProperty: __clickableElements\n\nDefault: [object Object]"
        },
        {
          "name": "shortcutKeys",
          "description": "`shortcutKeys` {`any[]`} - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "onresponsive-element",
          "description": "`responsive-element` {`CustomEvent<{ element: any; }>`} - "
        },
        {
          "name": "onhighlight",
          "description": "`highlight` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onregister",
          "description": "`register` {`CustomEvent<{ remove: boolean; toolbar: this; }>`} - "
        },
        {
          "name": "onselectnode",
          "description": "`selectnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnodecontents",
          "description": "`selectnodecontents` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectrange",
          "description": "`selectrange` {`CustomEvent<any>`} - "
        },
        {
          "name": "onpastefromclipboard",
          "description": "`pastefromclipboard` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "hax-editor-toolbar",
      "attributes": []
    },
    {
      "name": "hax-editor-button",
      "description": "`hax-editor-button`\n\nEvents:\n\n  * `button-register` {`CustomEvent<{ tags: string[]; handler: (e: any) => void; }>`} - \n\n  * `rich-text-editor-prompt-closed` {`CustomEvent<this>`} - \n\n  * `rich-text-editor-prompt-open` {`CustomEvent<this>`} - \n\n  * `highlight` {`CustomEvent<boolean>`} - \n\n  * `highlightnode` {`CustomEvent<any>`} - \n\n  * `selectrange` {`CustomEvent<any>`} - \n\n  * `selectnode` {`CustomEvent<any>`} - \n\n  * `selectnodeccontents` {`CustomEvent<any>`} - \n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: string; commandVal: string; range: any; }>`} - \n\nAttributes:\n\n  * `element` - \n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `fields` {`any[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `prompt` - prompt that pops up when button is pressed\n\n  * `controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `shortcut-keys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `__selection` - highlight surrounding selected range\n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `tagsList` {`string`} - tags edited by this button\n\nProperties:\n\n  * `element` - \n\n  * `tag` {`string`} - \n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `promptCommand` - determines which command based on values passed from prompt\n(can be overriden for custom prompt  commands)\n\n  * `promptCommandVal` {`string`} - determaines commandVal based on values passed from prompt\n\n  * `setsInnerHTML` {`boolean`} - determaines if prompt also sets innerHTML of range\n(can be overriden for custom prompts)\n\n  * `editableSelection` {`boolean`} - \n\n  * `fields` {`any[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `prompt` - prompt that pops up when button is pressed\n\n  * `controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `shortcutKeys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `labelStyle` {`\"offscreen\" | null`} - label is offscreen (screenreader-only)\n\n  * `isToggled` {`boolean`} - whether button is toggled\n\n  * `tagsArray` {`string[]`} - \n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `__selection` - highlight surrounding selected range\n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `tagsList` {`string`} - tags edited by this button",
      "attributes": [
        {
          "name": "element",
          "description": "`element` - \n\nProperty: element"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - is element a custom inline widget element?\n\nProperty: id"
        },
        {
          "name": "__wrap",
          "description": "`__wrap` - contents node inside selected range\n\nProperty: __wrap"
        },
        {
          "name": "__oldValue",
          "description": "`__oldValue` - contents node inside selected range\n\nProperty: __oldValue"
        },
        {
          "name": "fields",
          "description": "`fields` {`any[]`} - fields for prompt popover.\n\nProperty: fields\n\nDefault: [object Object]"
        },
        {
          "name": "value",
          "description": "`value` - prefilled value of prompt\n\nProperty: value\n\nDefault: [object Object]"
        },
        {
          "name": "prompt",
          "description": "`prompt` - prompt that pops up when button is pressed\n\nProperty: prompt"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "command",
          "description": "`command` {`string`} - The command used for document.execCommand.\n\nProperty: command\n\nDefault: insertHTML"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional iron icon name for the button.\n\nProperty: icon"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label"
        },
        {
          "name": "range",
          "description": "`range` - The active selected range, inherited from the toolbar\n\nProperty: range"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\nProperty: shortcutKeys"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "__selection",
          "description": "`__selection` - highlight surrounding selected range\n\nProperty: __selection"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Is the button disabled? Default is false.\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: span"
        },
        {
          "name": "onbutton-register",
          "description": "`button-register` {`CustomEvent<{ tags: string[]; handler: (e: any) => void; }>`} - "
        },
        {
          "name": "onrich-text-editor-prompt-closed",
          "description": "`rich-text-editor-prompt-closed` {`CustomEvent<this>`} - "
        },
        {
          "name": "onrich-text-editor-prompt-open",
          "description": "`rich-text-editor-prompt-open` {`CustomEvent<this>`} - "
        },
        {
          "name": "onhighlight",
          "description": "`highlight` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onhighlightnode",
          "description": "`highlightnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectrange",
          "description": "`selectrange` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnode",
          "description": "`selectnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnodeccontents",
          "description": "`selectnodeccontents` {`CustomEvent<any>`} - "
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: string; commandVal: string; range: any; }>`} - "
        }
      ]
    },
    {
      "name": "hax-editor-toolbar",
      "description": "`hax-editor-toolbar`\n`A customized toolbar (with buttons) for HAX`\n\nEvents:\n\n  * `responsive-element` {`CustomEvent<{ element: any; }>`} - \n\n  * `highlight` {`CustomEvent<boolean>`} - \n\n  * `register` {`CustomEvent<{ remove: boolean; toolbar: this; }>`} - \n\n  * `selectnode` {`CustomEvent<any>`} - \n\n  * `selectnodecontents` {`CustomEvent<any>`} - \n\n  * `selectrange` {`CustomEvent<any>`} - \n\n  * `pastefromclipboard` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `buttons` {`any[]`} - raw array of buttons\n\n  * `editor` - `rich-text-editor` element that is currently in `contenteditable` mode\n\n  * `id` {`string`} - `rich-text-editor` unique id\n\n  * `savedSelection` - current text selected range.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `registered` {`boolean`} - selection singleton\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hidden` {`boolean`} - whether toolbar is hidden\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `__promptOpen` {`boolean`} - whether prompt is open\n\n  * `__selection` - selection singleton\n\n  * `always-visible` {`boolean`} - keep toolbar visible even when not editor not focused\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `config` {`({} | {})[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `more-icon` {`string`} - icon for more button.\n\n  * `more-label` {`string`} - label for more button.\n\n  * `more-label-toggled` {`string`} - label for more button when toggled.\n\n  * `more-show-text-label` {`boolean`} - show text label for more button.\n\n  * `responsive-size` {`string`} - size of editor.\n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `__clickableElements` - Tracks inline widgets that require selection data\n\n  * `shortcutKeys` {`any[]`} - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperties:\n\n  * `tag` {`string`} - \n\n  * `defaultConfig` {`({ label: string; type: string; buttons: { command: string; icon: string; label: string; shortcutKeys: string; type: string; }[]; collapsedUntil?: undefined; icon?: undefined; symbolTypes?: undefined; } | { ...; } | { ...; } | { ...; } | { ...; })[]`} - \n\n  * `miniConfig` {`({ label: string; type: string; buttons: ({ command: string; icon: string; label: string; toggles: boolean; type: string; collapsedUntil?: undefined; } | { collapsedUntil: string; command: string; icon: string; label: string; type: string; toggles?: undefined; })[]; collapsedUntil?: undefined; } | { ...; } | { ...; ...`} - \n\n  * `toolbarTemplate` {`TemplateResult`} - \n\n  * `buttons` {`any[]`} - raw array of buttons\n\n  * `editor` - `rich-text-editor` element that is currently in `contenteditable` mode\n\n  * `id` {`string`} - `rich-text-editor` unique id\n\n  * `savedSelection` - current text selected range.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `registered` {`boolean`} - selection singleton\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hidden` {`boolean`} - whether toolbar is hidden\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `__promptOpen` {`boolean`} - whether prompt is open\n\n  * `__selection` - selection singleton\n\n  * `disconnected` {`boolean`} - \n\n  * `controls` - id of editor currently being controlled\n\n  * `alwaysVisible` {`boolean`} - keep toolbar visible even when not editor not focused\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `config` {`({} | {})[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `moreIcon` {`string`} - icon for more button.\n\n  * `moreLabel` {`string`} - label for more button.\n\n  * `moreLabelToggled` {`string`} - label for more button when toggled.\n\n  * `moreShowTextLabel` {`boolean`} - show text label for more button.\n\n  * `responsiveSize` {`string`} - size of editor.\n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `__clickableElements` - Tracks inline widgets that require selection data\n\n  * `shortcutKeys` {`any[]`} - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.",
      "attributes": [
        {
          "name": "buttons",
          "description": "`buttons` {`any[]`} - raw array of buttons\n\nProperty: buttons"
        },
        {
          "name": "editor",
          "description": "`editor` - `rich-text-editor` element that is currently in `contenteditable` mode\n\nProperty: editor"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - `rich-text-editor` unique id\n\nProperty: id"
        },
        {
          "name": "savedSelection",
          "description": "`savedSelection` - current text selected range.\n\nProperty: savedSelection"
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "registered",
          "description": "`registered` {`boolean`} - selection singleton\n\nProperty: registered",
          "valueSet": "v"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "__focused",
          "description": "`__focused` {`boolean`} - whether toolbar has focus\n\nProperty: __focused",
          "valueSet": "v"
        },
        {
          "name": "__hidden",
          "description": "`__hidden` {`boolean`} - whether toolbar is hidden\n\nProperty: __hidden",
          "valueSet": "v"
        },
        {
          "name": "__hovered",
          "description": "`__hovered` {`boolean`} - whether toolbar is hovered\n\nProperty: __hovered",
          "valueSet": "v"
        },
        {
          "name": "__promptOpen",
          "description": "`__promptOpen` {`boolean`} - whether prompt is open\n\nProperty: __promptOpen",
          "valueSet": "v"
        },
        {
          "name": "__selection",
          "description": "`__selection` - selection singleton\n\nProperty: __selection"
        },
        {
          "name": "always-visible",
          "description": "`always-visible` {`boolean`} - keep toolbar visible even when not editor not focused\n\nProperty: alwaysVisible\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "collapsed",
          "description": "`collapsed` {`boolean`} - is toolbar collapsed?\n\nProperty: collapsed\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "config",
          "description": "`config` {`({} | {})[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\nProperty: config\n\nDefault: [object Object],[object Object]"
        },
        {
          "name": "more-icon",
          "description": "`more-icon` {`string`} - icon for more button.\n\nProperty: moreIcon\n\nDefault: more-vert"
        },
        {
          "name": "more-label",
          "description": "`more-label` {`string`} - label for more button.\n\nProperty: moreLabel\n\nDefault: More Buttons"
        },
        {
          "name": "more-label-toggled",
          "description": "`more-label-toggled` {`string`} - label for more button when toggled.\n\nProperty: moreLabelToggled\n\nDefault: Fewer Buttons"
        },
        {
          "name": "more-show-text-label",
          "description": "`more-show-text-label` {`boolean`} - show text label for more button.\n\nProperty: moreShowTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "responsive-size",
          "description": "`responsive-size` {`string`} - size of editor.\n\nProperty: responsiveSize\n\nDefault: xs"
        },
        {
          "name": "sticky",
          "description": "`sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\nProperty: sticky\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__clickableElements",
          "description": "`__clickableElements` - Tracks inline widgets that require selection data\n\nProperty: __clickableElements\n\nDefault: [object Object]"
        },
        {
          "name": "shortcutKeys",
          "description": "`shortcutKeys` {`any[]`} - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "onresponsive-element",
          "description": "`responsive-element` {`CustomEvent<{ element: any; }>`} - "
        },
        {
          "name": "onhighlight",
          "description": "`highlight` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onregister",
          "description": "`register` {`CustomEvent<{ remove: boolean; toolbar: this; }>`} - "
        },
        {
          "name": "onselectnode",
          "description": "`selectnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnodecontents",
          "description": "`selectnodecontents` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectrange",
          "description": "`selectrange` {`CustomEvent<any>`} - "
        },
        {
          "name": "onpastefromclipboard",
          "description": "`pastefromclipboard` {`CustomEvent<any>`} - "
        }
      ]
    }
  ],
  "globalAttributes": [],
  "valueSets": []
}
