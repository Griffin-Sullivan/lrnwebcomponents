{
  "version": 1,
  "tags": [
    {
      "name": "rich-text-editor-button-styles",
      "description": "`rich-text-editor-button-styles`\n\n",
      "attributes": []
    },
    {
      "name": "rich-text-editor-button",
      "description": "`rich-text-editor-button`\na button for rich text editor (custom buttons can extend this)\n\nEvents:\n\n  * `highlight` {`CustomEvent<boolean>`} - \n\n  * `highlightnode` {`CustomEvent<any>`} - \n\n  * `selectrange` {`CustomEvent<any>`} - \n\n  * `selectnode` {`CustomEvent<any>`} - \n\n  * `selectnodeccontents` {`CustomEvent<any>`} - \n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: string; commandVal: string; range: any; }>`} - \n\nAttributes:\n\n  * `controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `shortcut-keys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `__selection` - highlight surrounding selected range\n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `tagsList` {`string`} - tags edited by this button\n\nProperties:\n\n  * `controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `shortcutKeys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `labelStyle` {`\"offscreen\" | null`} - label is offscreen (screenreader-only)\n\n  * `isToggled` {`boolean`} - whether button is toggled\n\n  * `tagsArray` {`string[]`} - \n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `__selection` - highlight surrounding selected range\n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `tagsList` {`string`} - tags edited by this button",
      "attributes": [
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "command",
          "description": "`command` {`string`} - The command used for document.execCommand.\n\nProperty: command"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional iron icon name for the button.\n\nProperty: icon"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label"
        },
        {
          "name": "range",
          "description": "`range` - The active selected range, inherited from the toolbar\n\nProperty: range"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\nProperty: shortcutKeys"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "__selection",
          "description": "`__selection` - highlight surrounding selected range\n\nProperty: __selection"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Is the button disabled? Default is false.\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: "
        },
        {
          "name": "onhighlight",
          "description": "`highlight` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onhighlightnode",
          "description": "`highlightnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectrange",
          "description": "`selectrange` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnode",
          "description": "`selectnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnodeccontents",
          "description": "`selectnodeccontents` {`CustomEvent<any>`} - "
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: string; commandVal: string; range: any; }>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-emoji-picker",
      "description": "`rich-text-editor-emoji-picker`\nan emoji picker for the rich-text-editor\n\nEvents:\n\n  * `highlight` {`CustomEvent<boolean>`} - \n\n  * `highlightnode` {`CustomEvent<any>`} - \n\n  * `selectrange` {`CustomEvent<any>`} - \n\n  * `selectnode` {`CustomEvent<any>`} - \n\n  * `selectnodeccontents` {`CustomEvent<any>`} - \n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: string; commandVal: string; range: any; }>`} - \n\nAttributes:\n\n  * `emojiTypes` {`any[]`} - Emoji types types to include\n\n  * `allowNull` {`boolean`} - Allow a null option to be selected?\n\n  * `titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\n  * `value` - value of elected options\n\n  * `controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\n  * `command` {`string`} - command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `icon` {`string`} - Optional icon for null value\n\n  * `label` {`string`} - Label for the icon.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `shortcut-keys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `__selection` - highlight surrounding selected range\n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `tagsList` {`string`} - tags edited by this button\n\nProperties:\n\n  * `emojiTypes` {`any[]`} - Emoji types types to include\n\n  * `allowNull` {`boolean`} - Allow a null option to be selected?\n\n  * `titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\n  * `value` - value of elected options\n\n  * `controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\n  * `command` {`string`} - command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `icon` {`string`} - Optional icon for null value\n\n  * `label` {`string`} - Label for the icon.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `shortcutKeys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `labelStyle` {`\"offscreen\" | null`} - label is offscreen (screenreader-only)\n\n  * `isToggled` {`boolean`} - determines value of picker based on selected range\n\n  * `tagsArray` {`string[]`} - \n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `__selection` - highlight surrounding selected range\n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `tagsList` {`string`} - tags edited by this button",
      "attributes": [
        {
          "name": "emojiTypes",
          "description": "`emojiTypes` {`any[]`} - Emoji types types to include\n\nProperty: emojiTypes\n\nDefault: emotions,people,nature,food,travel,activities,objects,symbols,flags"
        },
        {
          "name": "allowNull",
          "description": "`allowNull` {`boolean`} - Allow a null option to be selected?\n\nProperty: allowNull\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "titleAsHtml",
          "description": "`titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\nProperty: titleAsHtml\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "`value` - value of elected options\n\nProperty: value\n\nDefault: null"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "command",
          "description": "`command` {`string`} - command used for document.execCommand.\n\nProperty: command\n\nDefault: insertHTML"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional icon for null value\n\nProperty: icon\n\nDefault: editor:insert-emoticon"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label\n\nDefault: Insert emoji"
        },
        {
          "name": "range",
          "description": "`range` - The active selected range, inherited from the toolbar\n\nProperty: range"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\nProperty: shortcutKeys"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "__selection",
          "description": "`__selection` - highlight surrounding selected range\n\nProperty: __selection"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Is the button disabled? Default is false.\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: "
        },
        {
          "name": "onhighlight",
          "description": "`highlight` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onhighlightnode",
          "description": "`highlightnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectrange",
          "description": "`selectrange` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnode",
          "description": "`selectnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnodeccontents",
          "description": "`selectnodeccontents` {`CustomEvent<any>`} - "
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: string; commandVal: string; range: any; }>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-heading-picker",
      "description": "`rich-text-editor-heading-picker`\na heading picker for the rich-text-editor\n\nEvents:\n\n  * `highlight` {`CustomEvent<boolean>`} - \n\n  * `highlightnode` {`CustomEvent<any>`} - \n\n  * `selectrange` {`CustomEvent<any>`} - \n\n  * `selectnode` {`CustomEvent<any>`} - \n\n  * `selectnodeccontents` {`CustomEvent<any>`} - \n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: string; commandVal: string; range: any; }>`} - \n\nAttributes:\n\n  * `blocks` {`any[]`} - block element options as array of objects,\neg. [ { label: \"Paragraph\", tag: \"p\" }, { label: \"Heading 1\", tag: \"h1\" }, ...]\n\n  * `allowNull` {`boolean`} - Allow a null option to be selected?\n\n  * `titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\n  * `value` - value of elected options\n\n  * `controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\n  * `command` {`string`} - command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `icon` - Optional icon for null value\n\n  * `label` {`string`} - Label for the icon.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `shortcut-keys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `__selection` - highlight surrounding selected range\n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `tagsList` {`string`} - tags edited by this button\n\nProperties:\n\n  * `blocks` {`any[]`} - block element options as array of objects,\neg. [ { label: \"Paragraph\", tag: \"p\" }, { label: \"Heading 1\", tag: \"h1\" }, ...]\n\n  * `allowNull` {`boolean`} - Allow a null option to be selected?\n\n  * `titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\n  * `value` - value of elected options\n\n  * `controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\n  * `command` {`string`} - command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `icon` - Optional icon for null value\n\n  * `label` {`string`} - Label for the icon.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `shortcutKeys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `labelStyle` {`\"offscreen\" | null`} - label is offscreen (screenreader-only)\n\n  * `isToggled` {`boolean`} - determines value of picker based on selected range\n\n  * `tagsArray` {`string[]`} - \n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `__selection` - highlight surrounding selected range\n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `tagsList` {`string`} - tags edited by this button",
      "attributes": [
        {
          "name": "blocks",
          "description": "`blocks` {`any[]`} - block element options as array of objects,\neg. [ { label: \"Paragraph\", tag: \"p\" }, { label: \"Heading 1\", tag: \"h1\" }, ...]\n\nProperty: blocks\n\nDefault: [object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]"
        },
        {
          "name": "allowNull",
          "description": "`allowNull` {`boolean`} - Allow a null option to be selected?\n\nProperty: allowNull\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "titleAsHtml",
          "description": "`titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\nProperty: titleAsHtml\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "`value` - value of elected options\n\nProperty: value\n\nDefault: null"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "command",
          "description": "`command` {`string`} - command used for document.execCommand.\n\nProperty: command\n\nDefault: formatBlock"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "icon",
          "description": "`icon` - Optional icon for null value\n\nProperty: icon\n\nDefault: null"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label\n\nDefault: Block format"
        },
        {
          "name": "range",
          "description": "`range` - The active selected range, inherited from the toolbar\n\nProperty: range"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\nProperty: shortcutKeys"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "__selection",
          "description": "`__selection` - highlight surrounding selected range\n\nProperty: __selection"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Is the button disabled? Default is false.\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: p,h1,h2,h3,h4,h5,h6,div,address,blockquote,pre"
        },
        {
          "name": "onhighlight",
          "description": "`highlight` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onhighlightnode",
          "description": "`highlightnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectrange",
          "description": "`selectrange` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnode",
          "description": "`selectnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnodeccontents",
          "description": "`selectnodeccontents` {`CustomEvent<any>`} - "
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: string; commandVal: string; range: any; }>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-image",
      "description": "`rich-text-editor-image`\nan inline image button for rich text editor\n\nEvents:\n\n  * `button-register` {`CustomEvent<{ tags: string[]; handler: (e: any) => void; }>`} - \n\n  * `rich-text-editor-prompt-closed` {`CustomEvent<this>`} - \n\n  * `rich-text-editor-prompt-open` {`CustomEvent<this>`} - \n\n  * `highlight` {`CustomEvent<boolean>`} - \n\n  * `highlightnode` {`CustomEvent<any>`} - \n\n  * `selectrange` {`CustomEvent<any>`} - \n\n  * `selectnode` {`CustomEvent<any>`} - \n\n  * `selectnodeccontents` {`CustomEvent<any>`} - \n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: string; commandVal: string; range: any; }>`} - \n\nAttributes:\n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `fields` {`({} | {} | {})[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `prompt` - prompt that pops up when button is pressed\n\n  * `controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `shortcut-keys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `__selection` - highlight surrounding selected range\n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `tagsList` {`string`} - tags edited by this button\n\nProperties:\n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `promptCommand` - determines which command based on values passed from prompt\n(can be overriden for custom prompt  commands)\n\n  * `promptCommandVal` {`string`} - determaines commandVal based on values passed from prompt\n\n  * `setsInnerHTML` {`boolean`} - determines if prompt also sets innerHTML of range\n(can be overriden for custom prompts)\n\n  * `editableSelection` {`boolean`} - \n\n  * `fields` {`({} | {} | {})[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `prompt` - prompt that pops up when button is pressed\n\n  * `controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `shortcutKeys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `labelStyle` {`\"offscreen\" | null`} - label is offscreen (screenreader-only)\n\n  * `isToggled` {`boolean | undefined`} - whether button is toggled\n\n  * `tagsArray` {`string[]`} - \n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `__selection` - highlight surrounding selected range\n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `tagsList` {`string`} - tags edited by this button",
      "attributes": [
        {
          "name": "id",
          "description": "`id` {`string`} - is element a custom inline widget element?\n\nProperty: id"
        },
        {
          "name": "__wrap",
          "description": "`__wrap` - contents node inside selected range\n\nProperty: __wrap"
        },
        {
          "name": "__oldValue",
          "description": "`__oldValue` - contents node inside selected range\n\nProperty: __oldValue"
        },
        {
          "name": "fields",
          "description": "`fields` {`({} | {} | {})[]`} - fields for prompt popover.\n\nProperty: fields\n\nDefault: [object Object],[object Object],[object Object],[object Object]"
        },
        {
          "name": "value",
          "description": "`value` - prefilled value of prompt\n\nProperty: value\n\nDefault: [object Object]"
        },
        {
          "name": "prompt",
          "description": "`prompt` - prompt that pops up when button is pressed\n\nProperty: prompt"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "command",
          "description": "`command` {`string`} - The command used for document.execCommand.\n\nProperty: command\n\nDefault: insertHTML"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional iron icon name for the button.\n\nProperty: icon\n\nDefault: editor:insert-photo"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label\n\nDefault: Insert Inline Image"
        },
        {
          "name": "range",
          "description": "`range` - The active selected range, inherited from the toolbar\n\nProperty: range"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\nProperty: shortcutKeys"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "__selection",
          "description": "`__selection` - highlight surrounding selected range\n\nProperty: __selection"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Is the button disabled? Default is false.\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: img"
        },
        {
          "name": "onbutton-register",
          "description": "`button-register` {`CustomEvent<{ tags: string[]; handler: (e: any) => void; }>`} - "
        },
        {
          "name": "onrich-text-editor-prompt-closed",
          "description": "`rich-text-editor-prompt-closed` {`CustomEvent<this>`} - "
        },
        {
          "name": "onrich-text-editor-prompt-open",
          "description": "`rich-text-editor-prompt-open` {`CustomEvent<this>`} - "
        },
        {
          "name": "onhighlight",
          "description": "`highlight` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onhighlightnode",
          "description": "`highlightnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectrange",
          "description": "`selectrange` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnode",
          "description": "`selectnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnodeccontents",
          "description": "`selectnodeccontents` {`CustomEvent<any>`} - "
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: string; commandVal: string; range: any; }>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-link",
      "description": "`rich-text-editor-link`\na button for rich text editor (custom buttons can extend this)\n\nEvents:\n\n  * `button-register` {`CustomEvent<{ tags: string[]; handler: (e: any) => void; }>`} - \n\n  * `rich-text-editor-prompt-closed` {`CustomEvent<this>`} - \n\n  * `rich-text-editor-prompt-open` {`CustomEvent<this>`} - \n\n  * `highlight` {`CustomEvent<boolean>`} - \n\n  * `highlightnode` {`CustomEvent<any>`} - \n\n  * `selectrange` {`CustomEvent<any>`} - \n\n  * `selectnode` {`CustomEvent<any>`} - \n\n  * `selectnodeccontents` {`CustomEvent<any>`} - \n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: string; commandVal: string; range: any; }>`} - \n\nAttributes:\n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `fields` {`{}[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `prompt` - prompt that pops up when button is pressed\n\n  * `controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `shortcut-keys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `__selection` - highlight surrounding selected range\n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`string`} - Can this button toggle?\n\n  * `tagsList` {`string`} - tags edited by this button\n\nProperties:\n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `promptCommand` - determines which command based on values passed from prompt\n(can be overriden for custom prompt  commands)\n\n  * `promptCommandVal` - determaines commandVal based on values passed from prompt\n\n  * `setsInnerHTML` {`boolean`} - determines if prompt also sets innerHTML of range\n(can be overriden for custom prompts)\n\n  * `editableSelection` {`boolean`} - \n\n  * `fields` {`{}[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `prompt` - prompt that pops up when button is pressed\n\n  * `controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `shortcutKeys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `labelStyle` {`\"offscreen\" | null`} - label is offscreen (screenreader-only)\n\n  * `isToggled` {`boolean | undefined`} - whether button is toggled\n\n  * `tagsArray` {`string[]`} - \n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `__selection` - highlight surrounding selected range\n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`string`} - Can this button toggle?\n\n  * `tagsList` {`string`} - tags edited by this button",
      "attributes": [
        {
          "name": "id",
          "description": "`id` {`string`} - is element a custom inline widget element?\n\nProperty: id"
        },
        {
          "name": "__wrap",
          "description": "`__wrap` - contents node inside selected range\n\nProperty: __wrap"
        },
        {
          "name": "__oldValue",
          "description": "`__oldValue` - contents node inside selected range\n\nProperty: __oldValue"
        },
        {
          "name": "fields",
          "description": "`fields` {`{}[]`} - fields for prompt popover.\n\nProperty: fields\n\nDefault: ,[object Object]"
        },
        {
          "name": "value",
          "description": "`value` - prefilled value of prompt\n\nProperty: value\n\nDefault: [object Object]"
        },
        {
          "name": "prompt",
          "description": "`prompt` - prompt that pops up when button is pressed\n\nProperty: prompt"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "command",
          "description": "`command` {`string`} - The command used for document.execCommand.\n\nProperty: command\n\nDefault: CreateLink"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional iron icon name for the button.\n\nProperty: icon\n\nDefault: link"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label\n\nDefault: Link"
        },
        {
          "name": "range",
          "description": "`range` - The active selected range, inherited from the toolbar\n\nProperty: range"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\nProperty: shortcutKeys\n\nDefault: ctrl+k"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand\n\nDefault: unlink"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon\n\nDefault: mdextra:unlink"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel\n\nDefault: Unlink"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "__selection",
          "description": "`__selection` - highlight surrounding selected range\n\nProperty: __selection"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Is the button disabled? Default is false.\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`string`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: true"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: a"
        },
        {
          "name": "onbutton-register",
          "description": "`button-register` {`CustomEvent<{ tags: string[]; handler: (e: any) => void; }>`} - "
        },
        {
          "name": "onrich-text-editor-prompt-closed",
          "description": "`rich-text-editor-prompt-closed` {`CustomEvent<this>`} - "
        },
        {
          "name": "onrich-text-editor-prompt-open",
          "description": "`rich-text-editor-prompt-open` {`CustomEvent<this>`} - "
        },
        {
          "name": "onhighlight",
          "description": "`highlight` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onhighlightnode",
          "description": "`highlightnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectrange",
          "description": "`selectrange` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnode",
          "description": "`selectnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnodeccontents",
          "description": "`selectnodeccontents` {`CustomEvent<any>`} - "
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: string; commandVal: string; range: any; }>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-more-button",
      "description": "`rich-text-editor-more-button`\na more button to toggle collapsed buttons in the rich text editor\n\nEvents:\n\n  * `highlight` {`CustomEvent<boolean>`} - \n\n  * `highlightnode` {`CustomEvent<any>`} - \n\n  * `selectrange` {`CustomEvent<any>`} - \n\n  * `selectnode` {`CustomEvent<any>`} - \n\n  * `selectnodeccontents` {`CustomEvent<any>`} - \n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: string; commandVal: string; range: any; }>`} - \n\nAttributes:\n\n  * `collapse-max` {`string`} - The maximum size where all of the buttons display\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `shortcut-keys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `__selection` - highlight surrounding selected range\n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `tagsList` {`string`} - tags edited by this button\n\nProperties:\n\n  * `collapseMax` {`string`} - The maximum size where all of the buttons display\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `labelToggled` {`string`} - \n\n  * `controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `shortcutKeys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `labelStyle` {`\"offscreen\" | null`} - label is offscreen (screenreader-only)\n\n  * `isToggled` {`boolean`} - whether button is toggled\n\n  * `tagsArray` {`string[]`} - \n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `__selection` - highlight surrounding selected range\n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `tagsList` {`string`} - tags edited by this button",
      "attributes": [
        {
          "name": "collapse-max",
          "description": "`collapse-max` {`string`} - The maximum size where all of the buttons display\n\nProperty: collapseMax\n\nDefault: xs"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "command",
          "description": "`command` {`string`} - The command used for document.execCommand.\n\nProperty: command"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional iron icon name for the button.\n\nProperty: icon\n\nDefault: more-vert"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label\n\nDefault: More buttons"
        },
        {
          "name": "range",
          "description": "`range` - The active selected range, inherited from the toolbar\n\nProperty: range"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\nProperty: shortcutKeys"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "__selection",
          "description": "`__selection` - highlight surrounding selected range\n\nProperty: __selection"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Is the button disabled? Default is false.\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: "
        },
        {
          "name": "onhighlight",
          "description": "`highlight` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onhighlightnode",
          "description": "`highlightnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectrange",
          "description": "`selectrange` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnode",
          "description": "`selectnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnodeccontents",
          "description": "`selectnodeccontents` {`CustomEvent<any>`} - "
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: string; commandVal: string; range: any; }>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-picker",
      "description": "`rich-text-editor-picker`\na picker for rich text editor (custom buttons can extend this)\n\nEvents:\n\n  * `highlight` {`CustomEvent<boolean>`} - \n\n  * `highlightnode` {`CustomEvent<any>`} - \n\n  * `selectrange` {`CustomEvent<any>`} - \n\n  * `selectnode` {`CustomEvent<any>`} - \n\n  * `selectnodeccontents` {`CustomEvent<any>`} - \n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: string; commandVal: string; range: any; }>`} - \n\nAttributes:\n\n  * `allowNull` {`boolean`} - Allow a null option to be selected?\n\n  * `titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\n  * `value` - value of elected options\n\n  * `controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\n  * `command` {`string`} - command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `icon` {`string`} - Optional icon for null value\n\n  * `label` {`string`} - Label for the icon.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `shortcut-keys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `__selection` - highlight surrounding selected range\n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `tagsList` {`string`} - tags edited by this button\n\nProperties:\n\n  * `allowNull` {`boolean`} - Allow a null option to be selected?\n\n  * `titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\n  * `value` - value of elected options\n\n  * `controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\n  * `command` {`string`} - command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `icon` {`string`} - Optional icon for null value\n\n  * `label` {`string`} - Label for the icon.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `shortcutKeys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `labelStyle` {`\"offscreen\" | null`} - label is offscreen (screenreader-only)\n\n  * `isToggled` {`boolean`} - determines value of picker based on selected range\n\n  * `tagsArray` {`string[]`} - \n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `__selection` - highlight surrounding selected range\n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `tagsList` {`string`} - tags edited by this button",
      "attributes": [
        {
          "name": "allowNull",
          "description": "`allowNull` {`boolean`} - Allow a null option to be selected?\n\nProperty: allowNull\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "titleAsHtml",
          "description": "`titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\nProperty: titleAsHtml\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "`value` - value of elected options\n\nProperty: value\n\nDefault: null"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "command",
          "description": "`command` {`string`} - command used for document.execCommand.\n\nProperty: command\n\nDefault: insertHTML"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional icon for null value\n\nProperty: icon"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label\n\nDefault: Insert link"
        },
        {
          "name": "range",
          "description": "`range` - The active selected range, inherited from the toolbar\n\nProperty: range"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\nProperty: shortcutKeys"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "__selection",
          "description": "`__selection` - highlight surrounding selected range\n\nProperty: __selection"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Is the button disabled? Default is false.\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: "
        },
        {
          "name": "onhighlight",
          "description": "`highlight` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onhighlightnode",
          "description": "`highlightnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectrange",
          "description": "`selectrange` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnode",
          "description": "`selectnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnodeccontents",
          "description": "`selectnodeccontents` {`CustomEvent<any>`} - "
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: string; commandVal: string; range: any; }>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-prompt-button",
      "description": "`rich-text-editor-prompt-button`\na button that prompts for more information for rich text editor (custom buttons can extend this)\n\nEvents:\n\n  * `button-register` {`CustomEvent<{ tags: string[]; handler: (e: any) => void; }>`} - \n\n  * `rich-text-editor-prompt-closed` {`CustomEvent<this>`} - \n\n  * `rich-text-editor-prompt-open` {`CustomEvent<this>`} - \n\n  * `highlight` {`CustomEvent<boolean>`} - \n\n  * `highlightnode` {`CustomEvent<any>`} - \n\n  * `selectrange` {`CustomEvent<any>`} - \n\n  * `selectnode` {`CustomEvent<any>`} - \n\n  * `selectnodeccontents` {`CustomEvent<any>`} - \n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: string; commandVal: string; range: any; }>`} - \n\nAttributes:\n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `fields` {`any[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `prompt` - prompt that pops up when button is pressed\n\n  * `controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `shortcut-keys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `__selection` - highlight surrounding selected range\n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `tagsList` {`string`} - tags edited by this button\n\nProperties:\n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `promptCommand` - determines which command based on values passed from prompt\n(can be overriden for custom prompt  commands)\n\n  * `promptCommandVal` - determines commandVal based on values passed from prompt\n(can be overriden for custom prompt command values)\n\n  * `setsInnerHTML` {`boolean`} - determines if prompt also sets innerHTML of range\n(can be overriden for custom prompts)\n\n  * `editableSelection` {`boolean`} - \n\n  * `fields` {`any[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `prompt` - prompt that pops up when button is pressed\n\n  * `controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `shortcutKeys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `labelStyle` {`\"offscreen\" | null`} - label is offscreen (screenreader-only)\n\n  * `isToggled` {`boolean`} - whether button is toggled\n\n  * `tagsArray` {`string[]`} - \n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `__selection` - highlight surrounding selected range\n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `tagsList` {`string`} - tags edited by this button",
      "attributes": [
        {
          "name": "id",
          "description": "`id` {`string`} - is element a custom inline widget element?\n\nProperty: id"
        },
        {
          "name": "__wrap",
          "description": "`__wrap` - contents node inside selected range\n\nProperty: __wrap"
        },
        {
          "name": "__oldValue",
          "description": "`__oldValue` - contents node inside selected range\n\nProperty: __oldValue"
        },
        {
          "name": "fields",
          "description": "`fields` {`any[]`} - fields for prompt popover.\n\nProperty: fields\n\nDefault: [object Object]"
        },
        {
          "name": "value",
          "description": "`value` - prefilled value of prompt\n\nProperty: value\n\nDefault: [object Object]"
        },
        {
          "name": "prompt",
          "description": "`prompt` - prompt that pops up when button is pressed\n\nProperty: prompt"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "command",
          "description": "`command` {`string`} - The command used for document.execCommand.\n\nProperty: command"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional iron icon name for the button.\n\nProperty: icon"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label"
        },
        {
          "name": "range",
          "description": "`range` - The active selected range, inherited from the toolbar\n\nProperty: range"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\nProperty: shortcutKeys"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "__selection",
          "description": "`__selection` - highlight surrounding selected range\n\nProperty: __selection"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Is the button disabled? Default is false.\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: span"
        },
        {
          "name": "onbutton-register",
          "description": "`button-register` {`CustomEvent<{ tags: string[]; handler: (e: any) => void; }>`} - "
        },
        {
          "name": "onrich-text-editor-prompt-closed",
          "description": "`rich-text-editor-prompt-closed` {`CustomEvent<this>`} - "
        },
        {
          "name": "onrich-text-editor-prompt-open",
          "description": "`rich-text-editor-prompt-open` {`CustomEvent<this>`} - "
        },
        {
          "name": "onhighlight",
          "description": "`highlight` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onhighlightnode",
          "description": "`highlightnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectrange",
          "description": "`selectrange` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnode",
          "description": "`selectnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnodeccontents",
          "description": "`selectnodeccontents` {`CustomEvent<any>`} - "
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: string; commandVal: string; range: any; }>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-symbol-picker",
      "description": "`rich-text-editor-symbol-picker`\na symbol picker for the rich-text-editor\n\nEvents:\n\n  * `highlight` {`CustomEvent<boolean>`} - \n\n  * `highlightnode` {`CustomEvent<any>`} - \n\n  * `selectrange` {`CustomEvent<any>`} - \n\n  * `selectnode` {`CustomEvent<any>`} - \n\n  * `selectnodeccontents` {`CustomEvent<any>`} - \n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: string; commandVal: string; range: any; }>`} - \n\nAttributes:\n\n  * `symbolTypes` {`any[]`} - Symbol types to include\n\n  * `allowNull` {`boolean`} - Allow a null option to be selected?\n\n  * `titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\n  * `value` - value of elected options\n\n  * `controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\n  * `command` {`string`} - command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `icon` {`string`} - Optional icon for null value\n\n  * `label` {`string`} - Label for the icon.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `shortcut-keys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `__selection` - highlight surrounding selected range\n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `tagsList` {`string`} - tags edited by this button\n\nProperties:\n\n  * `symbolTypes` {`any[]`} - Symbol types to include\n\n  * `allowNull` {`boolean`} - Allow a null option to be selected?\n\n  * `titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\n  * `value` - value of elected options\n\n  * `controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\n  * `command` {`string`} - command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `icon` {`string`} - Optional icon for null value\n\n  * `label` {`string`} - Label for the icon.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `shortcutKeys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `labelStyle` {`\"offscreen\" | null`} - label is offscreen (screenreader-only)\n\n  * `isToggled` {`boolean`} - determines value of picker based on selected range\n\n  * `tagsArray` {`string[]`} - \n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `__selection` - highlight surrounding selected range\n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `tagsList` {`string`} - tags edited by this button",
      "attributes": [
        {
          "name": "symbolTypes",
          "description": "`symbolTypes` {`any[]`} - Symbol types to include\n\nProperty: symbolTypes\n\nDefault: symbols,math,characters,greek,misc"
        },
        {
          "name": "allowNull",
          "description": "`allowNull` {`boolean`} - Allow a null option to be selected?\n\nProperty: allowNull\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "titleAsHtml",
          "description": "`titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\nProperty: titleAsHtml\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "`value` - value of elected options\n\nProperty: value\n\nDefault: null"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "command",
          "description": "`command` {`string`} - command used for document.execCommand.\n\nProperty: command\n\nDefault: insertHTML"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional icon for null value\n\nProperty: icon\n\nDefault: editor:functions"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label\n\nDefault: Insert symbol"
        },
        {
          "name": "range",
          "description": "`range` - The active selected range, inherited from the toolbar\n\nProperty: range"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\nProperty: shortcutKeys"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "__selection",
          "description": "`__selection` - highlight surrounding selected range\n\nProperty: __selection"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Is the button disabled? Default is false.\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: "
        },
        {
          "name": "onhighlight",
          "description": "`highlight` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onhighlightnode",
          "description": "`highlightnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectrange",
          "description": "`selectrange` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnode",
          "description": "`selectnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnodeccontents",
          "description": "`selectnodeccontents` {`CustomEvent<any>`} - "
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: string; commandVal: string; range: any; }>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-underline",
      "description": "`rich-text-editor-underline`\na button for rich text editor (custom buttons can extend this)\n\nEvents:\n\n  * `button-register` {`CustomEvent<{ tags: string[]; handler: (e: any) => void; }>`} - \n\n  * `rich-text-editor-prompt-closed` {`CustomEvent<this>`} - \n\n  * `rich-text-editor-prompt-open` {`CustomEvent<this>`} - \n\n  * `highlight` {`CustomEvent<boolean>`} - \n\n  * `highlightnode` {`CustomEvent<any>`} - \n\n  * `selectrange` {`CustomEvent<any>`} - \n\n  * `selectnode` {`CustomEvent<any>`} - \n\n  * `selectnodeccontents` {`CustomEvent<any>`} - \n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: string; commandVal: string; range: any; }>`} - \n\nAttributes:\n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `fields` {`{}[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `prompt` - prompt that pops up when button is pressed\n\n  * `controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `shortcut-keys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `__selection` - highlight surrounding selected range\n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `tagsList` {`string`} - tags edited by this button\n\nProperties:\n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `promptCommand` - determines which command based on values passed from prompt\n(can be overriden for custom prompt  commands)\n\n  * `promptCommandVal` {`void`} - determaines commandVal based on values passed from prompt\n\n  * `setsInnerHTML` {`boolean`} - determines if prompt also sets innerHTML of range\n(can be overriden for custom prompts)\n\n  * `editableSelection` {`boolean`} - \n\n  * `fields` {`{}[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `prompt` - prompt that pops up when button is pressed\n\n  * `controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `shortcutKeys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `labelStyle` {`\"offscreen\" | null`} - label is offscreen (screenreader-only)\n\n  * `isToggled` {`boolean`} - whether button is toggled\n\n  * `tagsArray` {`string[]`} - \n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `__selection` - highlight surrounding selected range\n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `tagsList` {`string`} - tags edited by this button",
      "attributes": [
        {
          "name": "id",
          "description": "`id` {`string`} - is element a custom inline widget element?\n\nProperty: id"
        },
        {
          "name": "__wrap",
          "description": "`__wrap` - contents node inside selected range\n\nProperty: __wrap"
        },
        {
          "name": "__oldValue",
          "description": "`__oldValue` - contents node inside selected range\n\nProperty: __oldValue"
        },
        {
          "name": "fields",
          "description": "`fields` {`{}[]`} - fields for prompt popover.\n\nProperty: fields\n\nDefault: [object Object]"
        },
        {
          "name": "value",
          "description": "`value` - prefilled value of prompt\n\nProperty: value\n\nDefault: [object Object]"
        },
        {
          "name": "prompt",
          "description": "`prompt` - prompt that pops up when button is pressed\n\nProperty: prompt"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `rich-text-editor` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "command",
          "description": "`command` {`string`} - The command used for document.execCommand.\n\nProperty: command\n\nDefault: underline"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional iron icon name for the button.\n\nProperty: icon\n\nDefault: editor:format-underlined"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label\n\nDefault: Underline (not recommended)"
        },
        {
          "name": "range",
          "description": "`range` - The active selected range, inherited from the toolbar\n\nProperty: range"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-sperated list of keyboard shortcuts for the editor\n\nProperty: shortcutKeys\n\nDefault: ctrl+u"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "__selection",
          "description": "`__selection` - highlight surrounding selected range\n\nProperty: __selection"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Is the button disabled? Default is false.\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: u"
        },
        {
          "name": "onbutton-register",
          "description": "`button-register` {`CustomEvent<{ tags: string[]; handler: (e: any) => void; }>`} - "
        },
        {
          "name": "onrich-text-editor-prompt-closed",
          "description": "`rich-text-editor-prompt-closed` {`CustomEvent<this>`} - "
        },
        {
          "name": "onrich-text-editor-prompt-open",
          "description": "`rich-text-editor-prompt-open` {`CustomEvent<this>`} - "
        },
        {
          "name": "onhighlight",
          "description": "`highlight` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onhighlightnode",
          "description": "`highlightnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectrange",
          "description": "`selectrange` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnode",
          "description": "`selectnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnodeccontents",
          "description": "`selectnodeccontents` {`CustomEvent<any>`} - "
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: string; commandVal: string; range: any; }>`} - "
        }
      ]
    },
    {
      "name": "fullscreen-behaviors",
      "description": "`fullscreen-behaviors`\nabstracted fullscreen behaviors\n\n",
      "attributes": []
    },
    {
      "name": "rich-text-editor-styles",
      "description": "`fullscreen-behaviors`\nabstracted fullscreen behaviors\n\n",
      "attributes": []
    },
    {
      "name": "rich-text-editor-prompt",
      "description": "`rich-text-editor-prompt`\n`A utility that manages state of multiple rich-text-prompts on one page.`\n\nAttributes:\n\n  * `fields` {`any[]`} - fields for prompt popover.\n\n  * `range` - selected text.\n\n  * `value` - prefilled value of prompt\n\n  * `__focused` {`boolean`} - whether prompt has focus\n\n  * `__hovered` {`boolean`} - whether prompt is hovered\n\n  * `__opened` {`boolean`} - whether prompt isopen\n\nProperties:\n\n  * `fields` {`any[]`} - fields for prompt popover.\n\n  * `range` - selected text.\n\n  * `value` - prefilled value of prompt\n\n  * `__focused` {`boolean`} - whether prompt has focus\n\n  * `__hovered` {`boolean`} - whether prompt is hovered\n\n  * `__opened` {`boolean`} - whether prompt isopen\n\n  * `hidden` {`boolean`} - \n\n  * `selection` - ",
      "attributes": [
        {
          "name": "fields",
          "description": "`fields` {`any[]`} - fields for prompt popover.\n\nProperty: fields"
        },
        {
          "name": "range",
          "description": "`range` - selected text.\n\nProperty: range"
        },
        {
          "name": "value",
          "description": "`value` - prefilled value of prompt\n\nProperty: value"
        },
        {
          "name": "__focused",
          "description": "`__focused` {`boolean`} - whether prompt has focus\n\nProperty: __focused",
          "valueSet": "v"
        },
        {
          "name": "__hovered",
          "description": "`__hovered` {`boolean`} - whether prompt is hovered\n\nProperty: __hovered",
          "valueSet": "v"
        },
        {
          "name": "__opened",
          "description": "`__opened` {`boolean`} - whether prompt isopen\n\nProperty: __opened",
          "valueSet": "v"
        }
      ]
    },
    {
      "name": "rich-text-editor-selection",
      "description": "`rich-text-editor-selection`\n`a button for rich text editor (custom buttons can extend this)`\n\nEvents:\n\n  * `change` {`CustomEvent<boolean>`} - \n\nAttributes:\n\n  * `editor` - \n\n  * `collapsed` {`boolean`} - \n\n  * `observer` - \n\n  * `range` - \n\n  * `toolbar` - \n\n  * `hidden` {`boolean`} - \n\n  * `__toolbars` {`any[]`} - \n\n  * `id` {`string`} - \n\nProperties:\n\n  * `editor` - \n\n  * `collapsed` {`boolean`} - \n\n  * `observer` - \n\n  * `range` - \n\n  * `toolbar` - \n\n  * `hidden` {`boolean`} - \n\n  * `__toolbars` {`any[]`} - \n\n  * `__clipboard` - \n\n  * `id` {`string`} - ",
      "attributes": [
        {
          "name": "editor",
          "description": "`editor` - \n\nProperty: editor"
        },
        {
          "name": "collapsed",
          "description": "`collapsed` {`boolean`} - \n\nProperty: collapsed",
          "valueSet": "v"
        },
        {
          "name": "observer",
          "description": "`observer` - \n\nProperty: observer"
        },
        {
          "name": "range",
          "description": "`range` - \n\nProperty: range"
        },
        {
          "name": "toolbar",
          "description": "`toolbar` - \n\nProperty: toolbar"
        },
        {
          "name": "hidden",
          "description": "`hidden` {`boolean`} - \n\nProperty: hidden\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "__toolbars",
          "description": "`__toolbars` {`any[]`} - \n\nProperty: __toolbars\n\nDefault: "
        },
        {
          "name": "id",
          "description": "`id` {`string`} - \n\nProperty: id"
        },
        {
          "name": "onchange",
          "description": "`change` {`CustomEvent<boolean>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-breadcrumb",
      "description": "`rich-text-editor-breadcrumb`\n`a button for rich text editor breadcrumbs`\n\nEvents:\n\n  * `breadcrumb-tap` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `controls` {`string`} - The text-editor that this breadcrumb controls.\n\n  * `target` - The target node that this breadcrumb selects.\n\n  * `label` {`string`} - The tag for this breadcrumb.\n\nProperties:\n\n  * `controls` {`string`} - The text-editor that this breadcrumb controls.\n\n  * `target` - The target node that this breadcrumb selects.\n\n  * `label` {`string`} - The tag for this breadcrumb.",
      "attributes": [
        {
          "name": "controls",
          "description": "`controls` {`string`} - The text-editor that this breadcrumb controls.\n\nProperty: controls"
        },
        {
          "name": "target",
          "description": "`target` - The target node that this breadcrumb selects.\n\nProperty: target"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - The tag for this breadcrumb.\n\nProperty: label\n\nDefault: "
        },
        {
          "name": "onbreadcrumb-tap",
          "description": "`breadcrumb-tap` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-breadcrumbs",
      "description": "`rich-text-editor-breadcrumbs`\n`A utility that manages state of multiple rich-text-prompts on one page.`\n\nEvents:\n\n  * `selectnode` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `controls` {`string`} - active rict-text-editor.\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `hidden` {`boolean`} - Hide breadcrumbs\n\n  * `sticky` {`boolean`} - Should breadcrumbs stick to top so that it is always visible?\n\n  * `label` {`string`} - breadcrumb labels.\n\nProperties:\n\n  * `controls` {`string`} - active rict-text-editor.\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `hidden` {`boolean`} - Hide breadcrumbs\n\n  * `sticky` {`boolean`} - Should breadcrumbs stick to top so that it is always visible?\n\n  * `label` {`string`} - breadcrumb labels.",
      "attributes": [
        {
          "name": "controls",
          "description": "`controls` {`string`} - active rict-text-editor.\n\nProperty: controls"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "hidden",
          "description": "`hidden` {`boolean`} - Hide breadcrumbs\n\nProperty: hidden\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "sticky",
          "description": "`sticky` {`boolean`} - Should breadcrumbs stick to top so that it is always visible?\n\nProperty: sticky\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - breadcrumb labels.\n\nProperty: label\n\nDefault: Expand selection: "
        },
        {
          "name": "onselectnode",
          "description": "`selectnode` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-toolbar-full",
      "description": "`rich-text-editor-toolbar-full`\n`a full toolbar with breadcrumbs for the rich text editor`\n\nEvents:\n\n  * `responsive-element` {`CustomEvent<{ element: any; }>`} - \n\n  * `highlight` {`CustomEvent<boolean>`} - \n\n  * `register` {`CustomEvent<{ remove: boolean; toolbar: this; }>`} - \n\n  * `selectnode` {`CustomEvent<any>`} - \n\n  * `selectnodecontents` {`CustomEvent<any>`} - \n\n  * `selectrange` {`CustomEvent<any>`} - \n\n  * `pastefromclipboard` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `breadcrumbs-label` {`string`} - The label for the breadcrums area.\n\n  * `buttons` {`any[]`} - raw array of buttons\n\n  * `editor` - `rich-text-editor` element that is currently in `editing` mode\n\n  * `id` {`string`} - `rich-text-editor` unique id\n\n  * `savedSelection` - current text selected range.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `registered` {`boolean`} - selection singleton\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to an\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `__promptOpen` {`boolean`} - whether prompt is open\n\n  * `__selection` - selection singleton\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `config` - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `more-icon` {`string`} - icon for more button.\n\n  * `more-label` {`string`} - label for more button.\n\n  * `more-label-toggled` {`string`} - label for more button when toggled.\n\n  * `more-show-text-label` {`boolean`} - show text label for more button.\n\n  * `responsive-size` {`string`} - size of editor.\n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `__clickableElements` - Tracks inline widgets that require selection data\n\n  * `shortcutKeys` {`any[]`} - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperties:\n\n  * `breadcrumbsLabel` {`string`} - The label for the breadcrums area.\n\n  * `breadcrumbs` - \n\n  * `defaultConfig` {`({ label: string; type: string; buttons: { command: string; icon: string; label: string; shortcutKeys: string; type: string; }[]; collapsedUntil?: undefined; icon?: undefined; symbolTypes?: undefined; } | { ...; } | { ...; } | { ...; } | { ...; })[]`} - \n\n  * `miniConfig` {`({ label: string; type: string; buttons: ({ command: string; icon: string; label: string; toggles: boolean; type: string; collapsedUntil?: undefined; } | { collapsedUntil: string; command: string; icon: string; label: string; type: string; toggles?: undefined; })[]; collapsedUntil?: undefined; } | { ...; } | { ...; ...`} - \n\n  * `toolbarTemplate` {`TemplateResult`} - \n\n  * `buttons` {`any[]`} - raw array of buttons\n\n  * `editor` - `rich-text-editor` element that is currently in `editing` mode\n\n  * `id` {`string`} - `rich-text-editor` unique id\n\n  * `savedSelection` - current text selected range.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `registered` {`boolean`} - selection singleton\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to an\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `__promptOpen` {`boolean`} - whether prompt is open\n\n  * `__selection` - selection singleton\n\n  * `disconnected` - \n\n  * `noSelection` - \n\n  * `controls` - id of editor currently being controlled\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `config` - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `moreIcon` {`string`} - icon for more button.\n\n  * `moreLabel` {`string`} - label for more button.\n\n  * `moreLabelToggled` {`string`} - label for more button when toggled.\n\n  * `moreShowTextLabel` {`boolean`} - show text label for more button.\n\n  * `responsiveSize` {`string`} - size of editor.\n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `__clickableElements` - Tracks inline widgets that require selection data\n\n  * `shortcutKeys` {`any[]`} - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.",
      "attributes": [
        {
          "name": "breadcrumbs-label",
          "description": "`breadcrumbs-label` {`string`} - The label for the breadcrums area.\n\nProperty: breadcrumbsLabel\n\nDefault: Expand selection: "
        },
        {
          "name": "buttons",
          "description": "`buttons` {`any[]`} - raw array of buttons\n\nProperty: buttons"
        },
        {
          "name": "editor",
          "description": "`editor` - `rich-text-editor` element that is currently in `editing` mode\n\nProperty: editor"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - `rich-text-editor` unique id\n\nProperty: id"
        },
        {
          "name": "savedSelection",
          "description": "`savedSelection` - current text selected range.\n\nProperty: savedSelection"
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "registered",
          "description": "`registered` {`boolean`} - selection singleton\n\nProperty: registered",
          "valueSet": "v"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "show",
          "description": "`show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to an\n\nProperty: show"
        },
        {
          "name": "__focused",
          "description": "`__focused` {`boolean`} - whether toolbar has focus\n\nProperty: __focused",
          "valueSet": "v"
        },
        {
          "name": "__hovered",
          "description": "`__hovered` {`boolean`} - whether toolbar is hovered\n\nProperty: __hovered",
          "valueSet": "v"
        },
        {
          "name": "__promptOpen",
          "description": "`__promptOpen` {`boolean`} - whether prompt is open\n\nProperty: __promptOpen",
          "valueSet": "v"
        },
        {
          "name": "__selection",
          "description": "`__selection` - selection singleton\n\nProperty: __selection"
        },
        {
          "name": "collapsed",
          "description": "`collapsed` {`boolean`} - is toolbar collapsed?\n\nProperty: collapsed\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "config",
          "description": "`config` - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\nProperty: config\n\nDefault: [object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]"
        },
        {
          "name": "more-icon",
          "description": "`more-icon` {`string`} - icon for more button.\n\nProperty: moreIcon\n\nDefault: more-vert"
        },
        {
          "name": "more-label",
          "description": "`more-label` {`string`} - label for more button.\n\nProperty: moreLabel\n\nDefault: More Buttons"
        },
        {
          "name": "more-label-toggled",
          "description": "`more-label-toggled` {`string`} - label for more button when toggled.\n\nProperty: moreLabelToggled\n\nDefault: Fewer Buttons"
        },
        {
          "name": "more-show-text-label",
          "description": "`more-show-text-label` {`boolean`} - show text label for more button.\n\nProperty: moreShowTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "responsive-size",
          "description": "`responsive-size` {`string`} - size of editor.\n\nProperty: responsiveSize\n\nDefault: xs"
        },
        {
          "name": "sticky",
          "description": "`sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\nProperty: sticky\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__clickableElements",
          "description": "`__clickableElements` - Tracks inline widgets that require selection data\n\nProperty: __clickableElements\n\nDefault: [object Object]"
        },
        {
          "name": "shortcutKeys",
          "description": "`shortcutKeys` {`any[]`} - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "onresponsive-element",
          "description": "`responsive-element` {`CustomEvent<{ element: any; }>`} - "
        },
        {
          "name": "onhighlight",
          "description": "`highlight` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onregister",
          "description": "`register` {`CustomEvent<{ remove: boolean; toolbar: this; }>`} - "
        },
        {
          "name": "onselectnode",
          "description": "`selectnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnodecontents",
          "description": "`selectnodecontents` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectrange",
          "description": "`selectrange` {`CustomEvent<any>`} - "
        },
        {
          "name": "onpastefromclipboard",
          "description": "`pastefromclipboard` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-toolbar-mini",
      "description": "`rich-text-editor-toolbar-mini`\n`a mini floating toolbar for the rich text editor`\n\nEvents:\n\n  * `responsive-element` {`CustomEvent<{ element: any; }>`} - \n\n  * `highlight` {`CustomEvent<boolean>`} - \n\n  * `register` {`CustomEvent<{ remove: boolean; toolbar: this; }>`} - \n\n  * `selectnode` {`CustomEvent<any>`} - \n\n  * `selectnodecontents` {`CustomEvent<any>`} - \n\n  * `selectrange` {`CustomEvent<any>`} - \n\n  * `pastefromclipboard` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `buttons` {`any[]`} - raw array of buttons\n\n  * `editor` - `rich-text-editor` element that is currently in `editing` mode\n\n  * `id` {`string`} - `rich-text-editor` unique id\n\n  * `savedSelection` - current text selected range.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `registered` {`boolean`} - selection singleton\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to an\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `__promptOpen` {`boolean`} - whether prompt is open\n\n  * `__selection` - selection singleton\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `config` {`({} | {} | {})[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `more-icon` {`string`} - icon for more button.\n\n  * `more-label` {`string`} - label for more button.\n\n  * `more-label-toggled` {`string`} - label for more button when toggled.\n\n  * `more-show-text-label` {`boolean`} - show text label for more button.\n\n  * `responsive-size` {`string`} - size of editor.\n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `__clickableElements` - Tracks inline widgets that require selection data\n\n  * `shortcutKeys` {`any[]`} - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperties:\n\n  * `defaultConfig` {`({ label: string; type: string; buttons: { command: string; icon: string; label: string; shortcutKeys: string; type: string; }[]; collapsedUntil?: undefined; icon?: undefined; symbolTypes?: undefined; } | { ...; } | { ...; } | { ...; } | { ...; })[]`} - \n\n  * `miniConfig` {`({ label: string; type: string; buttons: ({ command: string; icon: string; label: string; toggles: boolean; type: string; collapsedUntil?: undefined; } | { collapsedUntil: string; command: string; icon: string; label: string; type: string; toggles?: undefined; })[]; collapsedUntil?: undefined; } | { ...; } | { ...; ...`} - \n\n  * `toolbarTemplate` {`TemplateResult`} - \n\n  * `buttons` {`any[]`} - raw array of buttons\n\n  * `editor` - `rich-text-editor` element that is currently in `editing` mode\n\n  * `id` {`string`} - `rich-text-editor` unique id\n\n  * `savedSelection` - current text selected range.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `registered` {`boolean`} - selection singleton\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to an\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `__promptOpen` {`boolean`} - whether prompt is open\n\n  * `__selection` - selection singleton\n\n  * `disconnected` - \n\n  * `noSelection` - \n\n  * `controls` - id of editor currently being controlled\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `config` {`({} | {} | {})[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `moreIcon` {`string`} - icon for more button.\n\n  * `moreLabel` {`string`} - label for more button.\n\n  * `moreLabelToggled` {`string`} - label for more button when toggled.\n\n  * `moreShowTextLabel` {`boolean`} - show text label for more button.\n\n  * `responsiveSize` {`string`} - size of editor.\n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `__clickableElements` - Tracks inline widgets that require selection data\n\n  * `shortcutKeys` {`any[]`} - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.",
      "attributes": [
        {
          "name": "buttons",
          "description": "`buttons` {`any[]`} - raw array of buttons\n\nProperty: buttons"
        },
        {
          "name": "editor",
          "description": "`editor` - `rich-text-editor` element that is currently in `editing` mode\n\nProperty: editor"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - `rich-text-editor` unique id\n\nProperty: id"
        },
        {
          "name": "savedSelection",
          "description": "`savedSelection` - current text selected range.\n\nProperty: savedSelection"
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "registered",
          "description": "`registered` {`boolean`} - selection singleton\n\nProperty: registered",
          "valueSet": "v"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "show",
          "description": "`show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to an\n\nProperty: show"
        },
        {
          "name": "__focused",
          "description": "`__focused` {`boolean`} - whether toolbar has focus\n\nProperty: __focused",
          "valueSet": "v"
        },
        {
          "name": "__hovered",
          "description": "`__hovered` {`boolean`} - whether toolbar is hovered\n\nProperty: __hovered",
          "valueSet": "v"
        },
        {
          "name": "__promptOpen",
          "description": "`__promptOpen` {`boolean`} - whether prompt is open\n\nProperty: __promptOpen",
          "valueSet": "v"
        },
        {
          "name": "__selection",
          "description": "`__selection` - selection singleton\n\nProperty: __selection"
        },
        {
          "name": "collapsed",
          "description": "`collapsed` {`boolean`} - is toolbar collapsed?\n\nProperty: collapsed\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "config",
          "description": "`config` {`({} | {} | {})[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\nProperty: config\n\nDefault: [object Object],[object Object],[object Object],[object Object]"
        },
        {
          "name": "more-icon",
          "description": "`more-icon` {`string`} - icon for more button.\n\nProperty: moreIcon\n\nDefault: more-vert"
        },
        {
          "name": "more-label",
          "description": "`more-label` {`string`} - label for more button.\n\nProperty: moreLabel\n\nDefault: More Buttons"
        },
        {
          "name": "more-label-toggled",
          "description": "`more-label-toggled` {`string`} - label for more button when toggled.\n\nProperty: moreLabelToggled\n\nDefault: Fewer Buttons"
        },
        {
          "name": "more-show-text-label",
          "description": "`more-show-text-label` {`boolean`} - show text label for more button.\n\nProperty: moreShowTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "responsive-size",
          "description": "`responsive-size` {`string`} - size of editor.\n\nProperty: responsiveSize\n\nDefault: xs"
        },
        {
          "name": "sticky",
          "description": "`sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\nProperty: sticky\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__clickableElements",
          "description": "`__clickableElements` - Tracks inline widgets that require selection data\n\nProperty: __clickableElements\n\nDefault: [object Object]"
        },
        {
          "name": "shortcutKeys",
          "description": "`shortcutKeys` {`any[]`} - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "onresponsive-element",
          "description": "`responsive-element` {`CustomEvent<{ element: any; }>`} - "
        },
        {
          "name": "onhighlight",
          "description": "`highlight` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onregister",
          "description": "`register` {`CustomEvent<{ remove: boolean; toolbar: this; }>`} - "
        },
        {
          "name": "onselectnode",
          "description": "`selectnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnodecontents",
          "description": "`selectnodecontents` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectrange",
          "description": "`selectrange` {`CustomEvent<any>`} - "
        },
        {
          "name": "onpastefromclipboard",
          "description": "`pastefromclipboard` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-toolbar",
      "description": "`rich-text-editor-toolbar`\n`default toolbar for rich text editor`\n\nEvents:\n\n  * `responsive-element` {`CustomEvent<{ element: any; }>`} - \n\n  * `highlight` {`CustomEvent<boolean>`} - \n\n  * `register` {`CustomEvent<{ remove: boolean; toolbar: this; }>`} - \n\n  * `selectnode` {`CustomEvent<any>`} - \n\n  * `selectnodecontents` {`CustomEvent<any>`} - \n\n  * `selectrange` {`CustomEvent<any>`} - \n\n  * `pastefromclipboard` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `buttons` {`any[]`} - raw array of buttons\n\n  * `editor` - `rich-text-editor` element that is currently in `editing` mode\n\n  * `id` {`string`} - `rich-text-editor` unique id\n\n  * `savedSelection` - current text selected range.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `registered` {`boolean`} - selection singleton\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to an\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `__promptOpen` {`boolean`} - whether prompt is open\n\n  * `__selection` - selection singleton\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `config` - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `more-icon` {`string`} - icon for more button.\n\n  * `more-label` {`string`} - label for more button.\n\n  * `more-label-toggled` {`string`} - label for more button when toggled.\n\n  * `more-show-text-label` {`boolean`} - show text label for more button.\n\n  * `responsive-size` {`string`} - size of editor.\n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `__clickableElements` - Tracks inline widgets that require selection data\n\n  * `shortcutKeys` {`any[]`} - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperties:\n\n  * `defaultConfig` {`({ label: string; type: string; buttons: { command: string; icon: string; label: string; shortcutKeys: string; type: string; }[]; collapsedUntil?: undefined; icon?: undefined; symbolTypes?: undefined; } | { ...; } | { ...; } | { ...; } | { ...; })[]`} - \n\n  * `miniConfig` {`({ label: string; type: string; buttons: ({ command: string; icon: string; label: string; toggles: boolean; type: string; collapsedUntil?: undefined; } | { collapsedUntil: string; command: string; icon: string; label: string; type: string; toggles?: undefined; })[]; collapsedUntil?: undefined; } | { ...; } | { ...; ...`} - \n\n  * `toolbarTemplate` {`TemplateResult`} - \n\n  * `buttons` {`any[]`} - raw array of buttons\n\n  * `editor` - `rich-text-editor` element that is currently in `editing` mode\n\n  * `id` {`string`} - `rich-text-editor` unique id\n\n  * `savedSelection` - current text selected range.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `registered` {`boolean`} - selection singleton\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to an\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `__promptOpen` {`boolean`} - whether prompt is open\n\n  * `__selection` - selection singleton\n\n  * `disconnected` - \n\n  * `noSelection` - \n\n  * `controls` - id of editor currently being controlled\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `config` - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `moreIcon` {`string`} - icon for more button.\n\n  * `moreLabel` {`string`} - label for more button.\n\n  * `moreLabelToggled` {`string`} - label for more button when toggled.\n\n  * `moreShowTextLabel` {`boolean`} - show text label for more button.\n\n  * `responsiveSize` {`string`} - size of editor.\n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `__clickableElements` - Tracks inline widgets that require selection data\n\n  * `shortcutKeys` {`any[]`} - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.",
      "attributes": [
        {
          "name": "buttons",
          "description": "`buttons` {`any[]`} - raw array of buttons\n\nProperty: buttons"
        },
        {
          "name": "editor",
          "description": "`editor` - `rich-text-editor` element that is currently in `editing` mode\n\nProperty: editor"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - `rich-text-editor` unique id\n\nProperty: id"
        },
        {
          "name": "savedSelection",
          "description": "`savedSelection` - current text selected range.\n\nProperty: savedSelection"
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "registered",
          "description": "`registered` {`boolean`} - selection singleton\n\nProperty: registered",
          "valueSet": "v"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "show",
          "description": "`show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to an\n\nProperty: show"
        },
        {
          "name": "__focused",
          "description": "`__focused` {`boolean`} - whether toolbar has focus\n\nProperty: __focused",
          "valueSet": "v"
        },
        {
          "name": "__hovered",
          "description": "`__hovered` {`boolean`} - whether toolbar is hovered\n\nProperty: __hovered",
          "valueSet": "v"
        },
        {
          "name": "__promptOpen",
          "description": "`__promptOpen` {`boolean`} - whether prompt is open\n\nProperty: __promptOpen",
          "valueSet": "v"
        },
        {
          "name": "__selection",
          "description": "`__selection` - selection singleton\n\nProperty: __selection"
        },
        {
          "name": "collapsed",
          "description": "`collapsed` {`boolean`} - is toolbar collapsed?\n\nProperty: collapsed\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "config",
          "description": "`config` - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\nProperty: config\n\nDefault: [object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]"
        },
        {
          "name": "more-icon",
          "description": "`more-icon` {`string`} - icon for more button.\n\nProperty: moreIcon\n\nDefault: more-vert"
        },
        {
          "name": "more-label",
          "description": "`more-label` {`string`} - label for more button.\n\nProperty: moreLabel\n\nDefault: More Buttons"
        },
        {
          "name": "more-label-toggled",
          "description": "`more-label-toggled` {`string`} - label for more button when toggled.\n\nProperty: moreLabelToggled\n\nDefault: Fewer Buttons"
        },
        {
          "name": "more-show-text-label",
          "description": "`more-show-text-label` {`boolean`} - show text label for more button.\n\nProperty: moreShowTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "responsive-size",
          "description": "`responsive-size` {`string`} - size of editor.\n\nProperty: responsiveSize\n\nDefault: xs"
        },
        {
          "name": "sticky",
          "description": "`sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\nProperty: sticky\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__clickableElements",
          "description": "`__clickableElements` - Tracks inline widgets that require selection data\n\nProperty: __clickableElements\n\nDefault: [object Object]"
        },
        {
          "name": "shortcutKeys",
          "description": "`shortcutKeys` {`any[]`} - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "onresponsive-element",
          "description": "`responsive-element` {`CustomEvent<{ element: any; }>`} - "
        },
        {
          "name": "onhighlight",
          "description": "`highlight` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onregister",
          "description": "`register` {`CustomEvent<{ remove: boolean; toolbar: this; }>`} - "
        },
        {
          "name": "onselectnode",
          "description": "`selectnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnodecontents",
          "description": "`selectnodecontents` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectrange",
          "description": "`selectrange` {`CustomEvent<any>`} - "
        },
        {
          "name": "onpastefromclipboard",
          "description": "`pastefromclipboard` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor",
      "description": "`rich-text-editor`\n\nEvents:\n\n  * `editing-disabled` {`CustomEvent<any>`} - \n\n  * `editing-enabled` {`CustomEvent<any>`} - \n\n  * `focus` {`CustomEvent<any>`} - \n\n  * `register` {`CustomEvent<{ remove: boolean; editor: this; }>`} - \n\n  * `getrange` {`CustomEvent<this>`} - \n\n  * `pastefromclipboard` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `disable-hover` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `rawhtml` {`string`} - raw html\n\n  * `update-range` {`boolean`} - whether to update range\n\n  * `__canceled-edits` - contains cancelled edits\n\n  * `__connected-toolbar` - connected toolbar\n\n  * `placeholder` {`string`} - Placeholder text for empty editable regions\n\n  * `toolbar` {`string`} - id for toolbar\n\n  * `type` {`string`} - type of editor toolbar, i.e.\nfull - full for full toolbar with breadcrumb,\nmini - mini for mini floating toolbar, or\ndefault toolbar if neither.\n\n  * `id` {`string`} - editor's unique id\n\n  * `range` - current range\n\n  * `__focused` {`boolean`} - has focus\n\n  * `__hovered` {`boolean`} - is hovered\n\n  * `editing` {`boolean`} - Maps to editing attribute\n\n  * `__selection` - selection management\n\nProperties:\n\n  * `disableHover` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `rawhtml` {`string`} - raw html\n\n  * `updateRange` {`boolean`} - whether to update range\n\n  * `__canceledEdits` - contains cancelled edits\n\n  * `__connectedToolbar` - connected toolbar\n\n  * `observer` {`MutationObserver`} - mutation observer\n\n  * `placeHolderHTML` {`string`} - \n\n  * `haxUIElement` {`boolean`} - \n\n  * `placeholder` {`string`} - Placeholder text for empty editable regions\n\n  * `toolbar` {`string`} - id for toolbar\n\n  * `type` {`string`} - type of editor toolbar, i.e.\nfull - full for full toolbar with breadcrumb,\nmini - mini for mini floating toolbar, or\ndefault toolbar if neither.\n\n  * `id` {`string`} - editor's unique id\n\n  * `range` - current range\n\n  * `__focused` {`boolean`} - has focus\n\n  * `__hovered` {`boolean`} - is hovered\n\n  * `editing` {`boolean`} - Maps to editing attribute\n\n  * `__selection` - selection management",
      "attributes": [
        {
          "name": "disable-hover",
          "description": "`disable-hover` {`boolean`} - don't reveal toolbar on mouseover\n\nProperty: disableHover",
          "valueSet": "v"
        },
        {
          "name": "rawhtml",
          "description": "`rawhtml` {`string`} - raw html\n\nProperty: rawhtml"
        },
        {
          "name": "update-range",
          "description": "`update-range` {`boolean`} - whether to update range\n\nProperty: updateRange",
          "valueSet": "v"
        },
        {
          "name": "__canceled-edits",
          "description": "`__canceled-edits` - contains cancelled edits\n\nProperty: __canceledEdits"
        },
        {
          "name": "__connected-toolbar",
          "description": "`__connected-toolbar` - connected toolbar\n\nProperty: __connectedToolbar"
        },
        {
          "name": "placeholder",
          "description": "`placeholder` {`string`} - Placeholder text for empty editable regions\n\nProperty: placeholder\n\nDefault: Click to edit"
        },
        {
          "name": "toolbar",
          "description": "`toolbar` {`string`} - id for toolbar\n\nProperty: toolbar\n\nDefault: "
        },
        {
          "name": "type",
          "description": "`type` {`string`} - type of editor toolbar, i.e.\nfull - full for full toolbar with breadcrumb,\nmini - mini for mini floating toolbar, or\ndefault toolbar if neither.\n\nProperty: type\n\nDefault: rich-text-editor-toolbar"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - editor's unique id\n\nProperty: id\n\nDefault: "
        },
        {
          "name": "range",
          "description": "`range` - current range\n\nProperty: range\n\nDefault: undefined"
        },
        {
          "name": "__focused",
          "description": "`__focused` {`boolean`} - has focus\n\nProperty: __focused\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__hovered",
          "description": "`__hovered` {`boolean`} - is hovered\n\nProperty: __hovered\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "editing",
          "description": "`editing` {`boolean`} - Maps to editing attribute\n\nProperty: editing\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__selection",
          "description": "`__selection` - selection management\n\nProperty: __selection"
        },
        {
          "name": "onediting-disabled",
          "description": "`editing-disabled` {`CustomEvent<any>`} - "
        },
        {
          "name": "onediting-enabled",
          "description": "`editing-enabled` {`CustomEvent<any>`} - "
        },
        {
          "name": "onfocus",
          "description": "`focus` {`CustomEvent<any>`} - "
        },
        {
          "name": "onregister",
          "description": "`register` {`CustomEvent<{ remove: boolean; editor: this; }>`} - "
        },
        {
          "name": "ongetrange",
          "description": "`getrange` {`CustomEvent<this>`} - "
        },
        {
          "name": "onpastefromclipboard",
          "description": "`pastefromclipboard` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor",
      "description": "`rich-text-editor`\n\nEvents:\n\n  * `editing-disabled` {`CustomEvent<any>`} - \n\n  * `editing-enabled` {`CustomEvent<any>`} - \n\n  * `focus` {`CustomEvent<any>`} - \n\n  * `register` {`CustomEvent<{ remove: boolean; editor: this; }>`} - \n\n  * `getrange` {`CustomEvent<this>`} - \n\n  * `pastefromclipboard` {`CustomEvent<this>`} - \n\nProperties:\n\n  * `observer` {`MutationObserver`} - mutation observer\n\n  * `placeHolderHTML` {`string`} - \n\n  * `haxUIElement` {`boolean`} - \n\n  * `placeholder` {`string`} - \n\n  * `toolbar` {`string`} - \n\n  * `type` {`string`} - \n\n  * `id` {`string`} - \n\n  * `range` - \n\n  * `__focused` {`boolean`} - \n\n  * `__hovered` {`boolean`} - \n\n  * `editing` {`boolean`} - \n\n  * `__selection` - ",
      "attributes": [
        {
          "name": "onediting-disabled",
          "description": "`editing-disabled` {`CustomEvent<any>`} - "
        },
        {
          "name": "onediting-enabled",
          "description": "`editing-enabled` {`CustomEvent<any>`} - "
        },
        {
          "name": "onfocus",
          "description": "`focus` {`CustomEvent<any>`} - "
        },
        {
          "name": "onregister",
          "description": "`register` {`CustomEvent<{ remove: boolean; editor: this; }>`} - "
        },
        {
          "name": "ongetrange",
          "description": "`getrange` {`CustomEvent<this>`} - "
        },
        {
          "name": "onpastefromclipboard",
          "description": "`pastefromclipboard` {`CustomEvent<this>`} - "
        }
      ]
    }
  ],
  "globalAttributes": [],
  "valueSets": []
}
