{
  "version": 1,
  "tags": [
    {
      "name": "hax-body",
      "description": "`hax-body`\nManager of the body area that can be modified\n\n### Styling\n`<hax-bodys>` provides following custom properties\nfor styling:\n\nCustom property | Description | Default\n----------------|-------------|--------\n--haxcms-base-styles-body-font-size |   | 16px\n--haxcms-base-styles-body-font-family, 'Noto Serif' |   | serif\n--haxcms-base-styles-body-line-height |   | 1.8\n--haxcms-base-styles-body-letter-spacing |   | .5px\n--hax-ui-headings |   | #d4ff77;\n--hax-color-text | default text color | #000\n--hax-contextual-action-text-color |  | --simple-colors-default-theme-grey-1\n--hax-contextual-action-color |  | --simple-colors-default-theme-cyan-7\n--hax-contextual-action-hover-color |  | \n--hax-body-target-background-color: --simple-colors-default-theme-cyan-2\n--hax-body-possible-target-background-color: --simple-colors-default-theme-grey-2\n\n####Outlines\nCustom property | Description | Default\n----------------|-------------|--------\n--hax-body-editable-outline |   | 1px solid --simple-colors-default-theme-deep-orange\n--hax-body-active-outline-hover: 1px solid --hax-contextual-action-color\n--hax-body-active-outline: 3px solid  --hax-contextual-action-color\n\n####Headings\nCustom property | Description | Default\n----------------|-------------|--------\n--hax-base-styles-h1-font-size |   | 2.5em\n--hax-base-styles-h1-line-height |   | 2.5em\n--hax-base-styles-h2-font-size |   | 2em\n--hax-base-styles-h3-font-size |   | 1.75em\n--hax-base-styles-h4-font-size |   | 1.5em\n--hax-base-styles-h5-font-size |   | 1.25em\n--hax-base-styles-h6-font-size |   | 1.25em\n--hax-base-styles-p-min-height |   | 43px\n--hax-base-styles-p-font-size |   | 24px\n--hax-base-styles-p-line-height |   | 1.8\n--hax-base-styles-p-letter-spacing |   | 0.5px\n\n####Links\nCustom property | Description | Default\n----------------|-------------|--------\n--hax-base-styles-a-color |  | --simple-colors-default-theme-grey-12\n--hax-base-styles-a-font-size |   | 24px\n--hax-base-styles-a-font-weight |   | normal\n--hax-base-styles-a-color-visited |   | --simple-colors-default-theme-light-blue\n--hax-base-styles-a-color-active |   | --simple-colors-default-theme-light-blue\n--hax-base-styles-a-font-weight-active |   | normal\n\n####Lists\nCustom property | Description | Default\n----------------|-------------|--------\n--hax-base-styles-list-padding-bottom |   | 1.5em\n--hax-base-styles-list-line-height |   | 40px\n--hax-base-styles-list-font-size |   | 24px\n--hax-base-styles-list-last-child-padding-bottom |   | 1em\n--hax-base-styles-list-padding-left |   | 20px\n--hax-base-styles-list-margin-left |   | 20px\n\nEvents:\n\n  * `hax-register-body` {`CustomEvent<this>`} - \n\n  * `place-holder-file-drop` {`CustomEvent<any>`} - \n\n  * `hax-drop-focus-event` {`CustomEvent<any>`} - \n\n  * `stack-changed` {`CustomEvent<{ value: Undo; }>`} - \n\n  * `can-undo-changed` {`CustomEvent<{ value: any; }>`} - \n\n  * `can-redo-changed` {`CustomEvent<{ value: any; }>`} - \n\nAttributes:\n\n  * `element-align` {`string`} - element align\n\n  * `tray-detail` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\n  * `tray-status` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\n  * `viewSourceToggle` {`boolean`} - Is active node in view source mode?\n\n  * `edit-mode` {`boolean`} - State of if we are editing or not.\n\n  * `hax-mover` {`boolean`} - \n\n  * `activeNode` - A reference to the active node in the slot.\n\n  * `t` - \n\n  * `can-undo` {`boolean`} - If we can currently undo based on stack position\n\n  * `can-redo` {`boolean`} - If we can currently redo based on stack position\n\n  * `target` - Allow for targetting OTHER elements w/ this behavior\n\n  * `stack` - The undo stack order\n\n  * `undoStackObserverProps` - Properties for the mutation observer\n\n  * `accent-color` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\n  * `dark` {`boolean`} - make the default theme dark?\n\nProperties:\n\n  * `elementAlign` {`string`} - element align\n\n  * `trayDetail` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\n  * `trayStatus` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\n  * `__ignoreActive` {`boolean`} - \n\n  * `__dragMoving` {`boolean`} - \n\n  * `___moveLock` {`boolean`} - \n\n  * `viewSourceToggle` {`boolean`} - Is active node in view source mode?\n\n  * `editMode` {`boolean`} - State of if we are editing or not.\n\n  * `haxMover` {`boolean`} - \n\n  * `activeNode` - A reference to the active node in the slot.\n\n  * `t` - \n\n  * `canUndo` {`boolean`} - If we can currently undo based on stack position\n\n  * `canRedo` {`boolean`} - If we can currently redo based on stack position\n\n  * `target` - Allow for targetting OTHER elements w/ this behavior\n\n  * `stack` - The undo stack order\n\n  * `undoStackLimit` {`number`} - \n\n  * `undoStackTimer` {`number`} - \n\n  * `undoStackIgnore` {`boolean`} - \n\n  * `undoStackObserver` - \n\n  * `undoStackObserverProps` - Properties for the mutation observer\n\n  * `undoStackInitialValue` - \n\n  * `undoStackPrevValue` - \n\n  * `accentColor` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\n  * `dark` {`boolean`} - make the default theme dark?\n\n  * `colors` - ",
      "attributes": [
        {
          "name": "element-align",
          "description": "`element-align` {`string`} - element align\n\nProperty: elementAlign"
        },
        {
          "name": "tray-detail",
          "description": "`tray-detail` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\nProperty: trayDetail"
        },
        {
          "name": "tray-status",
          "description": "`tray-status` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\nProperty: trayStatus"
        },
        {
          "name": "viewSourceToggle",
          "description": "`viewSourceToggle` {`boolean`} - Is active node in view source mode?\n\nProperty: viewSourceToggle\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "edit-mode",
          "description": "`edit-mode` {`boolean`} - State of if we are editing or not.\n\nProperty: editMode\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "hax-mover",
          "description": "`hax-mover` {`boolean`} - \n\nProperty: haxMover\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "activeNode",
          "description": "`activeNode` - A reference to the active node in the slot.\n\nProperty: activeNode\n\nDefault: null"
        },
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "can-undo",
          "description": "`can-undo` {`boolean`} - If we can currently undo based on stack position\n\nProperty: canUndo",
          "valueSet": "v"
        },
        {
          "name": "can-redo",
          "description": "`can-redo` {`boolean`} - If we can currently redo based on stack position\n\nProperty: canRedo",
          "valueSet": "v"
        },
        {
          "name": "target",
          "description": "`target` - Allow for targetting OTHER elements w/ this behavior\n\nProperty: target"
        },
        {
          "name": "stack",
          "description": "`stack` - The undo stack order\n\nProperty: stack"
        },
        {
          "name": "undoStackObserverProps",
          "description": "`undoStackObserverProps` - Properties for the mutation observer\n\nProperty: undoStackObserverProps\n\nDefault: [object Object]"
        },
        {
          "name": "accent-color",
          "description": "`accent-color` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\nProperty: accentColor\n\nDefault: grey"
        },
        {
          "name": "dark",
          "description": "`dark` {`boolean`} - make the default theme dark?\n\nProperty: dark\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "onhax-register-body",
          "description": "`hax-register-body` {`CustomEvent<this>`} - "
        },
        {
          "name": "onplace-holder-file-drop",
          "description": "`place-holder-file-drop` {`CustomEvent<any>`} - "
        },
        {
          "name": "onhax-drop-focus-event",
          "description": "`hax-drop-focus-event` {`CustomEvent<any>`} - "
        },
        {
          "name": "onstack-changed",
          "description": "`stack-changed` {`CustomEvent<{ value: Undo; }>`} - "
        },
        {
          "name": "oncan-undo-changed",
          "description": "`can-undo-changed` {`CustomEvent<{ value: any; }>`} - "
        },
        {
          "name": "oncan-redo-changed",
          "description": "`can-redo-changed` {`CustomEvent<{ value: any; }>`} - "
        }
      ]
    },
    {
      "name": "hax-text-editor-toolbar",
      "description": "`hax-text-editor-toolbar`\na customized toolbar (with buttons) for HAX\n\n",
      "attributes": []
    },
    {
      "name": "hax-text-editor",
      "description": "`hax-text-editor`\nHAX-specific implementation of rich-text-editor\n\n",
      "attributes": []
    },
    {
      "name": "hax-upload-field",
      "attributes": []
    },
    {
      "name": "hax-app-browser",
      "description": "`hax-app-browser`\n\nAttributes:\n\n  * `search` {`string`} - Search term\n\n  * `searching` {`boolean`} - Searching mode\n\n  * `appList` {`any[]`} - \n\n  * `activeApp` - Global activeApp object.\n\n  * `has-active` {`boolean`} - If we have an active, scale everything\n\nProperties:\n\n  * `search` {`string`} - Search term\n\n  * `searching` {`boolean`} - Searching mode\n\n  * `appList` {`any[]`} - \n\n  * `activeApp` - Global activeApp object.\n\n  * `hasActive` {`boolean`} - If we have an active, scale everything",
      "attributes": [
        {
          "name": "search",
          "description": "`search` {`string`} - Search term\n\nProperty: search"
        },
        {
          "name": "searching",
          "description": "`searching` {`boolean`} - Searching mode\n\nProperty: searching\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "appList",
          "description": "`appList` {`any[]`} - \n\nProperty: appList\n\nDefault: "
        },
        {
          "name": "activeApp",
          "description": "`activeApp` - Global activeApp object.\n\nProperty: activeApp\n\nDefault: null"
        },
        {
          "name": "has-active",
          "description": "`has-active` {`boolean`} - If we have an active, scale everything\n\nProperty: hasActive\n\nDefault: false",
          "valueSet": "v"
        }
      ]
    },
    {
      "name": "hax-app-picker",
      "description": "`hax-app-picker`\n`app pop over + picker with options`\n\nEvents:\n\n  * `hax-register-core-piece` {`CustomEvent<{ piece: string; object: this; }>`} - \n\nAttributes:\n\n  * `title` {`string`} - Title for the dialog\n\nProperties:\n\n  * `title` {`string`} - Title for the dialog",
      "attributes": [
        {
          "name": "title",
          "description": "`title` {`string`} - Title for the dialog\n\nProperty: title\n\nDefault: Select an option"
        },
        {
          "name": "onhax-register-core-piece",
          "description": "`hax-register-core-piece` {`CustomEvent<{ piece: string; object: this; }>`} - "
        }
      ]
    },
    {
      "name": "hax-app-search-inputs",
      "description": "`hax-app-search-inputs`\nAn element that brokers the visual display of a listing of material from an end point. The goal is to normalize data from some location which is media centric. This expects to get at least enough data in order to form a grid of items which are selectable. It's also generically implemented so that anything can be hooked up as a potential source for input (example: youtube API or custom in-house solution). The goal is to return enough info via fired event so that we can tell hax-body that the user selected a tag, properties, slot combination so that hax-body can turn the selection into a custom element / element injected into the hax-body slot.\n\nEvents:\n\n  * `search-values-changed` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `schema` - Schema used to generate the input types.\n\nProperties:\n\n  * `schema` - Schema used to generate the input types.",
      "attributes": [
        {
          "name": "schema",
          "description": "`schema` - Schema used to generate the input types.\n\nProperty: schema"
        },
        {
          "name": "onsearch-values-changed",
          "description": "`search-values-changed` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "hax-source",
      "description": "`hax-source`\n\nEvents:\n\n  * `hax-insert-content` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `image` {`string`} - \n\n  * `title` {`string`} - \n\n  * `details` {`string`} - \n\n  * `map` - \n\n  * `type` {`string`} - \n\nProperties:\n\n  * `image` {`string`} - \n\n  * `title` {`string`} - \n\n  * `details` {`string`} - \n\n  * `map` - \n\n  * `type` {`string`} - ",
      "attributes": [
        {
          "name": "image",
          "description": "`image` {`string`} - \n\nProperty: image"
        },
        {
          "name": "title",
          "description": "`title` {`string`} - \n\nProperty: title"
        },
        {
          "name": "details",
          "description": "`details` {`string`} - \n\nProperty: details"
        },
        {
          "name": "map",
          "description": "`map` - \n\nProperty: map"
        },
        {
          "name": "type",
          "description": "`type` {`string`} - \n\nProperty: type"
        },
        {
          "name": "onhax-insert-content",
          "description": "`hax-insert-content` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "hax-app-search-result",
      "description": "`hax-source`\n\nEvents:\n\n  * `hax-insert-content` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `image` {`string`} - \n\n  * `title` {`string`} - \n\n  * `details` {`string`} - \n\n  * `map` - \n\n  * `type` {`string`} - \n\nProperties:\n\n  * `image` {`string`} - \n\n  * `title` {`string`} - \n\n  * `details` {`string`} - \n\n  * `map` - \n\n  * `type` {`string`} - ",
      "attributes": [
        {
          "name": "image",
          "description": "`image` {`string`} - \n\nProperty: image"
        },
        {
          "name": "title",
          "description": "`title` {`string`} - \n\nProperty: title"
        },
        {
          "name": "details",
          "description": "`details` {`string`} - \n\nProperty: details"
        },
        {
          "name": "map",
          "description": "`map` - \n\nProperty: map"
        },
        {
          "name": "type",
          "description": "`type` {`string`} - \n\nProperty: type"
        },
        {
          "name": "onhax-insert-content",
          "description": "`hax-insert-content` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "hax-app-search",
      "description": "`hax-app-search`\n`An element that brokers the visual display of a listing of material from an end point. The goal is to normalize data from some location which is media centric. This expects to get at least enough data in order to form a grid of items which are selectable. It's also generically implemented so that anything can be hooked up as a potential source for input (example: youtube API or custom in-house solution). The goal is to return enough info via fired event so that we can tell hax-body that the user selected a tag, properties, slot combination so that hax-body can turn the selection into a custom element / element injected into the hax-body slot.`\n\nAttributes:\n\n  * `activeApp` - Active app globally bound based on previous selection.\n\n  * `searchSchema` - Search schema for presenting a form of input.\n\n  * `requestEndPoint` {`string`} - \n\n  * `requestParams` - \n\n  * `auto` {`boolean`} - Immediatley perform a request.\n\n  * `headers` - Custom headers for data binding from the App feed.\n\n  * `method` {`string`} - Custom method for requesting data (almost always will be GET)\n\n  * `loading` {`boolean`} - loading\n\n  * `requestData` - Media request data updated\n\n  * `media` {`any[]`} - Media object, normalized.\n\n  * `tos` {`any[]`} - Terms of service object\n\n  * `resultMap` - \n\nProperties:\n\n  * `activeApp` - Active app globally bound based on previous selection.\n\n  * `searchSchema` - Search schema for presenting a form of input.\n\n  * `requestEndPoint` {`string`} - \n\n  * `requestParams` - \n\n  * `auto` {`boolean`} - Immediatley perform a request.\n\n  * `headers` - Custom headers for data binding from the App feed.\n\n  * `method` {`string`} - Custom method for requesting data (almost always will be GET)\n\n  * `loading` {`boolean`} - loading\n\n  * `requestData` - Media request data updated\n\n  * `media` {`any[]`} - Media object, normalized.\n\n  * `tos` {`any[]`} - Terms of service object\n\n  * `resultMap` - ",
      "attributes": [
        {
          "name": "activeApp",
          "description": "`activeApp` - Active app globally bound based on previous selection.\n\nProperty: activeApp"
        },
        {
          "name": "searchSchema",
          "description": "`searchSchema` - Search schema for presenting a form of input.\n\nProperty: searchSchema"
        },
        {
          "name": "requestEndPoint",
          "description": "`requestEndPoint` {`string`} - \n\nProperty: requestEndPoint"
        },
        {
          "name": "requestParams",
          "description": "`requestParams` - \n\nProperty: requestParams"
        },
        {
          "name": "auto",
          "description": "`auto` {`boolean`} - Immediatley perform a request.\n\nProperty: auto\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "headers",
          "description": "`headers` - Custom headers for data binding from the App feed.\n\nProperty: headers\n\nDefault: [object Object]"
        },
        {
          "name": "method",
          "description": "`method` {`string`} - Custom method for requesting data (almost always will be GET)\n\nProperty: method\n\nDefault: GET"
        },
        {
          "name": "loading",
          "description": "`loading` {`boolean`} - loading\n\nProperty: loading\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "requestData",
          "description": "`requestData` - Media request data updated\n\nProperty: requestData\n\nDefault: [object Object]"
        },
        {
          "name": "media",
          "description": "`media` {`any[]`} - Media object, normalized.\n\nProperty: media\n\nDefault: "
        },
        {
          "name": "tos",
          "description": "`tos` {`any[]`} - Terms of service object\n\nProperty: tos\n\nDefault: "
        },
        {
          "name": "resultMap",
          "description": "`resultMap` - \n\nProperty: resultMap\n\nDefault: [object Object]"
        }
      ]
    },
    {
      "name": "hax-app",
      "description": "`hax-app`\nAn app registered with HAX. This provides all the information needed for HAX\nto understand how to talk to this backend as well as represent it in listings.\nIt also expresses how to take that data and wire it up to gizmos making it able to\nutilize multiple display methods.\n\nProperties:\n\n  * `eventName` {`string`} - ",
      "attributes": []
    },
    {
      "name": "hax-stax",
      "description": "`hax-stax`\nRegister a stax with HAX store.\n\nProperties:\n\n  * `eventName` {`string`} - ",
      "attributes": []
    },
    {
      "name": "hax-autoloader",
      "description": "`hax-autoloader`\n\nEvents:\n\n  * `hax-register-core-piece` {`CustomEvent<{ piece: string; object: this; }>`} - \n\n  * `hax-register-properties` {`CustomEvent<{ tag: any; properties: any; polymer: boolean; }>`} - \n\nAttributes:\n\n  * `processedList` - List of elements processed so we don't double process\n\n  * `haxProperties` - haxProperties\n\nProperties:\n\n  * `processedList` - List of elements processed so we don't double process\n\n  * `haxProperties` - haxProperties\n\n  * `HAXWiring` - ",
      "attributes": [
        {
          "name": "processedList",
          "description": "`processedList` - List of elements processed so we don't double process\n\nProperty: processedList\n\nDefault: [object Object]"
        },
        {
          "name": "haxProperties",
          "description": "`haxProperties` - haxProperties\n\nProperty: haxProperties"
        },
        {
          "name": "onhax-register-core-piece",
          "description": "`hax-register-core-piece` {`CustomEvent<{ piece: string; object: this; }>`} - "
        },
        {
          "name": "onhax-register-properties",
          "description": "`hax-register-properties` {`CustomEvent<{ tag: any; properties: any; polymer: boolean; }>`} - "
        }
      ]
    },
    {
      "name": "hax-cancel-dialog",
      "description": "`hax-cancel-dialog`\n\nEvents:\n\n  * `hax-register-core-piece` {`CustomEvent<{ piece: string; object: this; }>`} - \n\nAttributes:\n\n  * `t` - \n\nProperties:\n\n  * `t` - ",
      "attributes": [
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "onhax-register-core-piece",
          "description": "`hax-register-core-piece` {`CustomEvent<{ piece: string; object: this; }>`} - "
        }
      ]
    },
    {
      "name": "hax-ce-context",
      "description": "`hax-ce-context`\n`A context menu that provides common custom-element based authoring options.\n\nEvents:\n\n  * `ax-transform-node` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `disableTransform` {`boolean`} - \n\n  * `sourceView` {`boolean`} - \n\n  * `on-screen` {`boolean`} - \n\n  * `ceButtons` {`any[]`} - \n\n  * `activeTagName` {`string`} - \n\n  * `activeTagIcon` {`string`} - \n\n  * `t` - \n\n  * `view-source` {`boolean`} - \n\nProperties:\n\n  * `disableTransform` {`boolean`} - \n\n  * `sourceView` {`boolean`} - \n\n  * `haxUIElement` {`boolean`} - \n\n  * `onScreen` {`boolean`} - \n\n  * `ceButtons` {`any[]`} - \n\n  * `activeTagName` {`string`} - \n\n  * `activeTagIcon` {`string`} - \n\n  * `t` - \n\n  * `viewSource` {`boolean`} - \n\n  * `tourName` {`string`} - ",
      "attributes": [
        {
          "name": "disableTransform",
          "description": "`disableTransform` {`boolean`} - \n\nProperty: disableTransform",
          "valueSet": "v"
        },
        {
          "name": "sourceView",
          "description": "`sourceView` {`boolean`} - \n\nProperty: sourceView",
          "valueSet": "v"
        },
        {
          "name": "on-screen",
          "description": "`on-screen` {`boolean`} - \n\nProperty: onScreen\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "ceButtons",
          "description": "`ceButtons` {`any[]`} - \n\nProperty: ceButtons\n\nDefault: "
        },
        {
          "name": "activeTagName",
          "description": "`activeTagName` {`string`} - \n\nProperty: activeTagName\n\nDefault: "
        },
        {
          "name": "activeTagIcon",
          "description": "`activeTagIcon` {`string`} - \n\nProperty: activeTagIcon\n\nDefault: hax:paragraph"
        },
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "view-source",
          "description": "`view-source` {`boolean`} - \n\nProperty: viewSource\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "onax-transform-node",
          "description": "`ax-transform-node` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "hax-context-item-textop",
      "description": "`hax-context-item-textop`\n\nEvents:\n\n  * `hax-context-item-selected` {`CustomEvent<{ target: this; eventName: string; value: string; }>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `description` {`string`} - Optional description for this item.\n\n  * `action` {`boolean`} - \n\n  * `input-method` {`string`} - Method of input to display when activated. This is\nonly used when triggered as part of haxProperties\n\n  * `property-to-bind` {`string`} - Optional slot to bind this value to.\n\n  * `slot-to-bind` {`string`} - Optional slot to bind this value to.\n\n  * `value` {`string`} - an optional value to send along in the press. Allows for\nreusing events more easily\n\n  * `event-name` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\n  * `tooltip` {`string`} - Hover tip text\n\n  * `danger` {`boolean`} - red warning\n\n  * `feature` {`boolean`} - Inverted display mode\n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `show-tooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggledTooltip` {`string`} - Hover tip text\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperties:\n\n  * `description` {`string`} - Optional description for this item.\n\n  * `action` {`boolean`} - \n\n  * `inputMethod` {`string`} - Method of input to display when activated. This is\nonly used when triggered as part of haxProperties\n\n  * `propertyToBind` {`string`} - Optional slot to bind this value to.\n\n  * `slotToBind` {`string`} - Optional slot to bind this value to.\n\n  * `value` {`string`} - an optional value to send along in the press. Allows for\nreusing events more easily\n\n  * `eventName` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\n  * `tooltip` {`string`} - Hover tip text\n\n  * `danger` {`boolean`} - red warning\n\n  * `feature` {`boolean`} - Inverted display mode\n\n  * `menu` {`boolean`} - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `showTooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggledTooltip` {`string`} - Hover tip text\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`number`} - determines if button is toggled\n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | TemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | TemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | TemplateResult<1>`} - template for button tooltip\n\n  * `buttonTemplate` {`TemplateResult<1>`} - template for button, based on whether or not the button toggles\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - \n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys",
      "attributes": [
        {
          "name": "description",
          "description": "`description` {`string`} - Optional description for this item.\n\nProperty: description"
        },
        {
          "name": "action",
          "description": "`action` {`boolean`} - \n\nProperty: action\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "input-method",
          "description": "`input-method` {`string`} - Method of input to display when activated. This is\nonly used when triggered as part of haxProperties\n\nProperty: inputMethod\n\nDefault: null"
        },
        {
          "name": "property-to-bind",
          "description": "`property-to-bind` {`string`} - Optional slot to bind this value to.\n\nProperty: propertyToBind\n\nDefault: null"
        },
        {
          "name": "slot-to-bind",
          "description": "`slot-to-bind` {`string`} - Optional slot to bind this value to.\n\nProperty: slotToBind\n\nDefault: null"
        },
        {
          "name": "value",
          "description": "`value` {`string`} - an optional value to send along in the press. Allows for\nreusing events more easily\n\nProperty: value\n\nDefault: "
        },
        {
          "name": "event-name",
          "description": "`event-name` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\nProperty: eventName\n\nDefault: button"
        },
        {
          "name": "tooltip",
          "description": "`tooltip` {`string`} - Hover tip text\n\nProperty: tooltip"
        },
        {
          "name": "danger",
          "description": "`danger` {`boolean`} - red warning\n\nProperty: danger\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "feature",
          "description": "`feature` {`boolean`} - Inverted display mode\n\nProperty: feature\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional iron icon name for the button.\n\nProperty: icon"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label"
        },
        {
          "name": "show-tooltip",
          "description": "`show-tooltip` {`boolean`} - Alway show tooltip.\n\nProperty: showTooltip",
          "valueSet": "v"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled",
          "valueSet": "v"
        },
        {
          "name": "toggledTooltip",
          "description": "`toggledTooltip` {`string`} - Hover tip text\n\nProperty: toggledTooltip"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "onhax-context-item-selected",
          "description": "`hax-context-item-selected` {`CustomEvent<{ target: this; eventName: string; value: string; }>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "hax-context-item",
      "description": "`hax-context-item`\nA single button in the hax context menu for consistency.\n\nEvents:\n\n  * `hax-context-item-selected` {`CustomEvent<{ target: this; eventName: string; value: string; }>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `description` {`string`} - Optional description for this item.\n\n  * `default` {`boolean`} - Is this button concidered a primary interaction\n\n  * `action` {`boolean`} - \n\n  * `more` {`boolean`} - more implies there's an action after pressing the button\nso it'll put a visual indicator as such\n\n  * `input-method` {`string`} - Method of input to display when activated. This is\nonly used when triggered as part of haxProperties\n\n  * `property-to-bind` {`string`} - Optional slot to bind this value to.\n\n  * `slot-to-bind` {`string`} - Optional slot to bind this value to.\n\n  * `value` {`string`} - an optional value to send along in the press. Allows for\nreusing events more easily\n\n  * `event-name` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\n  * `tooltip` {`string`} - Hover tip text\n\n  * `danger` {`boolean`} - red warning\n\n  * `feature` {`boolean`} - Inverted display mode\n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the button.\n\n  * `show-tooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggledTooltip` {`string`} - Hover tip text\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperties:\n\n  * `description` {`string`} - Optional description for this item.\n\n  * `default` {`boolean`} - Is this button concidered a primary interaction\n\n  * `haxUIElement` {`boolean`} - \n\n  * `action` {`boolean`} - \n\n  * `more` {`boolean`} - more implies there's an action after pressing the button\nso it'll put a visual indicator as such\n\n  * `inputMethod` {`string`} - Method of input to display when activated. This is\nonly used when triggered as part of haxProperties\n\n  * `propertyToBind` {`string`} - Optional slot to bind this value to.\n\n  * `slotToBind` {`string`} - Optional slot to bind this value to.\n\n  * `value` {`string`} - an optional value to send along in the press. Allows for\nreusing events more easily\n\n  * `eventName` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\n  * `tooltip` {`string`} - Hover tip text\n\n  * `danger` {`boolean`} - red warning\n\n  * `feature` {`boolean`} - Inverted display mode\n\n  * `menu` {`boolean`} - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the button.\n\n  * `showTooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggledTooltip` {`string`} - Hover tip text\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`number`} - determines if button is toggled\n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | TemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | TemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | TemplateResult<1>`} - template for button tooltip\n\n  * `buttonTemplate` {`TemplateResult<1>`} - template for button, based on whether or not the button toggles\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - \n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys",
      "attributes": [
        {
          "name": "description",
          "description": "`description` {`string`} - Optional description for this item.\n\nProperty: description"
        },
        {
          "name": "default",
          "description": "`default` {`boolean`} - Is this button concidered a primary interaction\n\nProperty: default",
          "valueSet": "v"
        },
        {
          "name": "action",
          "description": "`action` {`boolean`} - \n\nProperty: action\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "more",
          "description": "`more` {`boolean`} - more implies there's an action after pressing the button\nso it'll put a visual indicator as such\n\nProperty: more\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "input-method",
          "description": "`input-method` {`string`} - Method of input to display when activated. This is\nonly used when triggered as part of haxProperties\n\nProperty: inputMethod\n\nDefault: null"
        },
        {
          "name": "property-to-bind",
          "description": "`property-to-bind` {`string`} - Optional slot to bind this value to.\n\nProperty: propertyToBind\n\nDefault: null"
        },
        {
          "name": "slot-to-bind",
          "description": "`slot-to-bind` {`string`} - Optional slot to bind this value to.\n\nProperty: slotToBind\n\nDefault: null"
        },
        {
          "name": "value",
          "description": "`value` {`string`} - an optional value to send along in the press. Allows for\nreusing events more easily\n\nProperty: value\n\nDefault: "
        },
        {
          "name": "event-name",
          "description": "`event-name` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\nProperty: eventName\n\nDefault: button"
        },
        {
          "name": "tooltip",
          "description": "`tooltip` {`string`} - Hover tip text\n\nProperty: tooltip"
        },
        {
          "name": "danger",
          "description": "`danger` {`boolean`} - red warning\n\nProperty: danger\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "feature",
          "description": "`feature` {`boolean`} - Inverted display mode\n\nProperty: feature\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional iron icon name for the button.\n\nProperty: icon"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the button.\n\nProperty: label"
        },
        {
          "name": "show-tooltip",
          "description": "`show-tooltip` {`boolean`} - Alway show tooltip.\n\nProperty: showTooltip",
          "valueSet": "v"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled",
          "valueSet": "v"
        },
        {
          "name": "toggledTooltip",
          "description": "`toggledTooltip` {`string`} - Hover tip text\n\nProperty: toggledTooltip"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "onhax-context-item-selected",
          "description": "`hax-context-item-selected` {`CustomEvent<{ target: this; eventName: string; value: string; }>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "hax-context-toolbar",
      "description": "Attributes:\n\n  * `target` - See what's selected\n\n  * `addLabel` {`string`} - This is an inline context menu\n\n  * `addContext` {`boolean`} - This is an inline context menu\n\n  * `ceContext` {`boolean`} - This is an inline context menu\n\n  * `plateContext` {`boolean`} - This is an inline context menu\n\n  * `trackMouse` {`boolean`} - This is an inline context menu\n\nProperties:\n\n  * `target` - See what's selected\n\n  * `addLabel` {`string`} - This is an inline context menu\n\n  * `addContext` {`boolean`} - This is an inline context menu\n\n  * `ceContext` {`boolean`} - This is an inline context menu\n\n  * `plateContext` {`boolean`} - This is an inline context menu\n\n  * `trackMouse` {`boolean`} - This is an inline context menu\n\n  * `haxVisible` - \n\n  * `topVisible` - \n\n  * `topToolbar` {`Element | null | undefined`} - \n\n  * `bottomToolbar` {`Element | null | undefined`} - ",
      "attributes": [
        {
          "name": "target",
          "description": "`target` - See what's selected\n\nProperty: target"
        },
        {
          "name": "addLabel",
          "description": "`addLabel` {`string`} - This is an inline context menu\n\nProperty: addLabel"
        },
        {
          "name": "addContext",
          "description": "`addContext` {`boolean`} - This is an inline context menu\n\nProperty: addContext",
          "valueSet": "v"
        },
        {
          "name": "ceContext",
          "description": "`ceContext` {`boolean`} - This is an inline context menu\n\nProperty: ceContext",
          "valueSet": "v"
        },
        {
          "name": "plateContext",
          "description": "`plateContext` {`boolean`} - This is an inline context menu\n\nProperty: plateContext",
          "valueSet": "v"
        },
        {
          "name": "trackMouse",
          "description": "`trackMouse` {`boolean`} - This is an inline context menu\n\nProperty: trackMouse",
          "valueSet": "v"
        }
      ]
    },
    {
      "name": "hax-export-dialog",
      "description": "`hax-export-dialog`\n\nEvents:\n\n  * `hax-register-core-piece` {`CustomEvent<{ piece: string; object: this; }>`} - \n\nAttributes:\n\n  * `t` - \n\nProperties:\n\n  * `t` - ",
      "attributes": [
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "onhax-register-core-piece",
          "description": "`hax-register-core-piece` {`CustomEvent<{ piece: string; object: this; }>`} - "
        }
      ]
    },
    {
      "name": "hax-gizmo-browser",
      "description": "`Browse a list of gizmos. This provides a listing of custom elements for people to search and select based on what have been defined as gizmos for users to select.`\n\nEvents:\n\n  * `filter` {`CustomEvent<boolean>`} - \n\n  * `filtered-changed` {`CustomEvent<{ value: any[]; }>`} - \n\nAttributes:\n\n  * `t` - \n\n  * `items` {`any[]`} - These are the items to be filtered\n\n  * `like` {`string`} - Filter regular expression string\n\n  * `where` {`string`} - The filter-by field of your items array of objects\n\n  * `case-sensitive` {`boolean`} - Enable case sensitivity when filtering\n\n  * `filtered` {`any[]`} - Filtered items\n\nProperties:\n\n  * `t` - \n\n  * `items` {`any[]`} - These are the items to be filtered\n\n  * `like` {`string`} - Filter regular expression string\n\n  * `where` {`string`} - The filter-by field of your items array of objects\n\n  * `caseSensitive` {`boolean`} - Enable case sensitivity when filtering\n\n  * `filtered` {`any[]`} - Filtered items",
      "attributes": [
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "items",
          "description": "`items` {`any[]`} - These are the items to be filtered\n\nProperty: items"
        },
        {
          "name": "like",
          "description": "`like` {`string`} - Filter regular expression string\n\nProperty: like"
        },
        {
          "name": "where",
          "description": "`where` {`string`} - The filter-by field of your items array of objects\n\nProperty: where\n\nDefault: title"
        },
        {
          "name": "case-sensitive",
          "description": "`case-sensitive` {`boolean`} - Enable case sensitivity when filtering\n\nProperty: caseSensitive\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "filtered",
          "description": "`filtered` {`any[]`} - Filtered items\n\nProperty: filtered\n\nDefault: "
        },
        {
          "name": "onfilter",
          "description": "`filter` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onfiltered-changed",
          "description": "`filtered-changed` {`CustomEvent<{ value: any[]; }>`} - "
        }
      ]
    },
    {
      "name": "hax-map",
      "description": "`hax-map`\n\nAttributes:\n\n  * `opened` {`boolean`} - Title when open.\n\n  * `cCount` {`string`} - \n\n  * `wCount` {`string`} - \n\n  * `hCount` {`string`} - \n\n  * `pCount` {`string`} - \n\n  * `eCount` {`string`} - \n\n  * `activeNodeIndex` {`number`} - \n\n  * `elementList` {`any[]`} - \n\n  * `t` - \n\nProperties:\n\n  * `indentedElements` {`any[]`} - \n\n  * `opened` {`boolean`} - Title when open.\n\n  * `cCount` {`string`} - \n\n  * `wCount` {`string`} - \n\n  * `hCount` {`string`} - \n\n  * `pCount` {`string`} - \n\n  * `eCount` {`string`} - \n\n  * `activeNodeIndex` {`number`} - \n\n  * `elementList` {`any[]`} - \n\n  * `t` - ",
      "attributes": [
        {
          "name": "opened",
          "description": "`opened` {`boolean`} - Title when open.\n\nProperty: opened",
          "valueSet": "v"
        },
        {
          "name": "cCount",
          "description": "`cCount` {`string`} - \n\nProperty: cCount"
        },
        {
          "name": "wCount",
          "description": "`wCount` {`string`} - \n\nProperty: wCount"
        },
        {
          "name": "hCount",
          "description": "`hCount` {`string`} - \n\nProperty: hCount"
        },
        {
          "name": "pCount",
          "description": "`pCount` {`string`} - \n\nProperty: pCount"
        },
        {
          "name": "eCount",
          "description": "`eCount` {`string`} - \n\nProperty: eCount"
        },
        {
          "name": "activeNodeIndex",
          "description": "`activeNodeIndex` {`number`} - \n\nProperty: activeNodeIndex"
        },
        {
          "name": "elementList",
          "description": "`elementList` {`any[]`} - \n\nProperty: elementList\n\nDefault: "
        },
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        }
      ]
    },
    {
      "name": "hax-picker",
      "description": "`hax-picker`\nA picker for selecting an item from a list of apps / hax gizmos which require\na decision to be made. This is used when multiple things match either on upload\nin the add operation of the app or in the gizmo selection to render through,\nsuch as having multiple ways of presenting an image.\n\nEvents:\n\n  * `hax-insert-content` {`CustomEvent<any>`} - \n\n  * `hax-app-picker-selection` {`CustomEvent<any>`} - \n\n  * `simple-modal-hide` {`CustomEvent<{}>`} - \n\nAttributes:\n\n  * `keywords` - \n\n  * `filters` {`any[]`} - \n\n  * `filter-on` {`boolean`} - \n\n  * `_elements` {`any[]`} - raw element set\n\n  * `selectionList` {`any[]`} - Refactored list for selection purposes\n\n  * `picker-type` {`string`} - Allow multiple uses\n\nProperties:\n\n  * `keywords` - \n\n  * `filters` {`any[]`} - \n\n  * `filterOn` {`boolean`} - \n\n  * `_elements` {`any[]`} - raw element set\n\n  * `selectionList` {`any[]`} - Refactored list for selection purposes\n\n  * `pickerType` {`string`} - Allow multiple uses",
      "attributes": [
        {
          "name": "keywords",
          "description": "`keywords` - \n\nProperty: keywords"
        },
        {
          "name": "filters",
          "description": "`filters` {`any[]`} - \n\nProperty: filters"
        },
        {
          "name": "filter-on",
          "description": "`filter-on` {`boolean`} - \n\nProperty: filterOn",
          "valueSet": "v"
        },
        {
          "name": "_elements",
          "description": "`_elements` {`any[]`} - raw element set\n\nProperty: _elements\n\nDefault: "
        },
        {
          "name": "selectionList",
          "description": "`selectionList` {`any[]`} - Refactored list for selection purposes\n\nProperty: selectionList\n\nDefault: "
        },
        {
          "name": "picker-type",
          "description": "`picker-type` {`string`} - Allow multiple uses\n\nProperty: pickerType\n\nDefault: gizmo"
        },
        {
          "name": "onhax-insert-content",
          "description": "`hax-insert-content` {`CustomEvent<any>`} - "
        },
        {
          "name": "onhax-app-picker-selection",
          "description": "`hax-app-picker-selection` {`CustomEvent<any>`} - "
        },
        {
          "name": "onsimple-modal-hide",
          "description": "`simple-modal-hide` {`CustomEvent<{}>`} - "
        }
      ]
    },
    {
      "name": "hax-plate-context",
      "description": "`hax-plate-context`\n`A context menu that provides common grid plate based authoring options.`\n\nEvents:\n\n  * `hax-context-item-selected` {`CustomEvent<{ target: any; eventName: string; value: any; }>`} - \n\nAttributes:\n\n  * `hasActiveEditingElement` {`boolean`} - \n\n  * `tray-detail` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\n  * `tray-status` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\n  * `t` - \n\n  * `view-source` {`boolean`} - \n\nProperties:\n\n  * `hasActiveEditingElement` {`boolean`} - \n\n  * `haxUIElement` {`boolean`} - \n\n  * `trayDetail` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\n  * `trayStatus` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\n  * `t` - \n\n  * `viewSource` {`boolean`} - \n\n  * `tourName` {`string`} - ",
      "attributes": [
        {
          "name": "hasActiveEditingElement",
          "description": "`hasActiveEditingElement` {`boolean`} - \n\nProperty: hasActiveEditingElement\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "tray-detail",
          "description": "`tray-detail` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\nProperty: trayDetail\n\nDefault: content-edit"
        },
        {
          "name": "tray-status",
          "description": "`tray-status` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\nProperty: trayStatus\n\nDefault: collapsed"
        },
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "view-source",
          "description": "`view-source` {`boolean`} - \n\nProperty: viewSource\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "onhax-context-item-selected",
          "description": "`hax-context-item-selected` {`CustomEvent<{ target: any; eventName: string; value: any; }>`} - "
        }
      ]
    },
    {
      "name": "hax-preferences-dialog",
      "description": "`hax-preferences-dialog`\n\nEvents:\n\n  * `hax-tray-button-click` {`CustomEvent<{ eventName: string; index: number; value: boolean; }>`} - \n\nAttributes:\n\n  * `schema` - Schema that has all of inputs / manages state\n\n  * `globalPreferences` - Preferences managed for everything global about HAX.\n\n  * `hideLink` {`boolean`} - Developer prop to hide the link\n\n  * `t` - \n\nProperties:\n\n  * `schema` - Schema that has all of inputs / manages state\n\n  * `globalPreferences` - Preferences managed for everything global about HAX.\n\n  * `hideLink` {`boolean`} - Developer prop to hide the link\n\n  * `t` - ",
      "attributes": [
        {
          "name": "schema",
          "description": "`schema` - Schema that has all of inputs / manages state\n\nProperty: schema"
        },
        {
          "name": "globalPreferences",
          "description": "`globalPreferences` - Preferences managed for everything global about HAX.\n\nProperty: globalPreferences"
        },
        {
          "name": "hideLink",
          "description": "`hideLink` {`boolean`} - Developer prop to hide the link\n\nProperty: hideLink\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "onhax-tray-button-click",
          "description": "`hax-tray-button-click` {`CustomEvent<{ eventName: string; index: number; value: boolean; }>`} - "
        }
      ]
    },
    {
      "name": "hax-stax-browser",
      "description": "`hax-stax-browser`\n\nAttributes:\n\n  * `staxList` {`any[]`} - The list of stax\n\nProperties:\n\n  * `staxList` {`any[]`} - The list of stax",
      "attributes": [
        {
          "name": "staxList",
          "description": "`staxList` {`any[]`} - The list of stax\n\nProperty: staxList\n\nDefault: "
        }
      ]
    },
    {
      "name": "hax-store",
      "description": "Events:\n\n  * `hax-insert-content` {`CustomEvent<{ tag: any; properties: any; content: string; gizmo: any; }>`} - \n\n  * `hax-store-write` {`CustomEvent<{ property: any; value: any; owner: any; }>`} - \n\n  * `simple-toast-show` {`CustomEvent<{ text: any; duration: number; classStyle: string; closeText: string; eventCallback: any; }>`} - \n\n  * `hax-store-app-store-loaded` {`CustomEvent<boolean>`} - \n\n  * `hax-store-ready` {`CustomEvent<boolean>`} - \n\n  * `hax-cancel` {`CustomEvent<any>`} - \n\n  * `place-holder-file-drop` {`CustomEvent<any>`} - \n\n  * `hax-store-property-updated` {`CustomEvent<{ property: any; value: any; owner: any; }>`} - \n\nAttributes:\n\n  * `haxTray` - Hax tray\n\n  * `haxAutoloader` - Hax autoloader element.\n\n  * `__appStoreData` - Internal app store data property after request\n\n  * `ready` {`boolean`} - \n\n  * `voice-responses-to` {`string`} - \n\n  * `skip-hax-confirmation` {`boolean`} - skipHAXConfirmation\n\n  * `storageData` - Local storage bridge\n\n  * `appStore` - Possible appStore endpoint for loading in things dynamically.\n\n  * `haxBodies` {`any[]`} - A list of all haxBodies that exist\n\n  * `activePlaceHolder` - An active place holder item reference. This is used\nfor inline drag and drop event detection so that we\nknow what element replace in context.\n\n  * `sessionObject` - Session object bridged in from a session method of some kind\n\n  * `skipExitTrap` {`boolean`} - skip the exit trap to prevent losing data\n\n  * `elementList` - Available elements keyed by tagName and with\ntheir haxProperties centrally registered.\n\n  * `elementAlign` {`string`} - element align\n\n  * `trayStatus` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\n  * `trayDetail` {`string`} - which panel is active int he tray: content-edit, view-source, etc.\n\n  * `staxList` {`any[]`} - Available hax stax which are just re-usable templates\n\n  * `connectionRewrites` - Support for deploy specific rewriting for things like JWTs\n\n  * `voice-debug` {`boolean`} - \n\n  * `validTagList` {`any[]`} - Valid tag list, tag only and including primatives for a baseline.\n\n  * `validGridTagList` {`any[]`} - Valid tag list, tag only and including primatives for a baseline.\n\n  * `validGizmoTypes` {`any[]`} - Gizmo types which can be used to bridge apps to gizmos.\n\n  * `_isSandboxed` {`boolean`} - Sandboxed environment test\n\n  * `t` - \n\n  * `haxProperties` - haxProperties\n\nProperties:\n\n  * `haxTray` - Hax tray\n\n  * `haxAutoloader` - Hax autoloader element.\n\n  * `__appStoreData` - Internal app store data property after request\n\n  * `ready` {`boolean`} - \n\n  * `activeGizmo` - \n\n  * `activeNodeIndex` {`null`} - \n\n  * `method` {`string`} - \n\n  * `haxSelectedText` {`string`} - \n\n  * `__winEvents` - \n\n  * `voiceRespondsTo` {`string`} - \n\n  * `voiceCommands` - \n\n  * `skipHAXConfirmation` {`boolean`} - skipHAXConfirmation\n\n  * `storageData` - Local storage bridge\n\n  * `appStore` - Possible appStore endpoint for loading in things dynamically.\n\n  * `activeNode` - \n\n  * `activeEditingElement` - \n\n  * `haxBodies` {`any[]`} - A list of all haxBodies that exist\n\n  * `activePlaceHolder` - An active place holder item reference. This is used\nfor inline drag and drop event detection so that we\nknow what element replace in context.\n\n  * `sessionObject` - Session object bridged in from a session method of some kind\n\n  * `editMode` {`boolean`} - \n\n  * `skipExitTrap` {`boolean`} - skip the exit trap to prevent losing data\n\n  * `appStoreLoaded` {`boolean`} - \n\n  * `elementList` - Available elements keyed by tagName and with\ntheir haxProperties centrally registered.\n\n  * `elementAlign` {`string`} - element align\n\n  * `trayStatus` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\n  * `trayDetail` {`string`} - which panel is active int he tray: content-edit, view-source, etc.\n\n  * `appList` {`never[]`} - \n\n  * `gizmoList` {`never[]`} - \n\n  * `activeHaxBody` - \n\n  * `staxList` {`any[]`} - Available hax stax which are just re-usable templates\n\n  * `globalPreferences` - \n\n  * `activeApp` - \n\n  * `connectionRewrites` - Support for deploy specific rewriting for things like JWTs\n\n  * `voiceDebug` {`boolean`} - \n\n  * `keyboardShortcuts` - \n\n  * `validTagList` {`any[]`} - Valid tag list, tag only and including primatives for a baseline.\n\n  * `validGridTagList` {`any[]`} - Valid tag list, tag only and including primatives for a baseline.\n\n  * `validGizmoTypes` {`any[]`} - Gizmo types which can be used to bridge apps to gizmos.\n\n  * `_isSandboxed` {`boolean`} - Sandboxed environment test\n\n  * `t` - \n\n  * `haxProperties` - haxProperties\n\n  * `HAXWiring` - ",
      "attributes": [
        {
          "name": "haxTray",
          "description": "`haxTray` - Hax tray\n\nProperty: haxTray"
        },
        {
          "name": "haxAutoloader",
          "description": "`haxAutoloader` - Hax autoloader element.\n\nProperty: haxAutoloader"
        },
        {
          "name": "__appStoreData",
          "description": "`__appStoreData` - Internal app store data property after request\n\nProperty: __appStoreData"
        },
        {
          "name": "ready",
          "description": "`ready` {`boolean`} - \n\nProperty: ready",
          "valueSet": "v"
        },
        {
          "name": "voice-responses-to",
          "description": "`voice-responses-to` {`string`} - \n\nProperty: voiceRespondsTo\n\nDefault: (worker)"
        },
        {
          "name": "skip-hax-confirmation",
          "description": "`skip-hax-confirmation` {`boolean`} - skipHAXConfirmation\n\nProperty: skipHAXConfirmation\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "storageData",
          "description": "`storageData` - Local storage bridge\n\nProperty: storageData\n\nDefault: [object Object]"
        },
        {
          "name": "appStore",
          "description": "`appStore` - Possible appStore endpoint for loading in things dynamically.\n\nProperty: appStore\n\nDefault: [object Object]"
        },
        {
          "name": "haxBodies",
          "description": "`haxBodies` {`any[]`} - A list of all haxBodies that exist\n\nProperty: haxBodies\n\nDefault: "
        },
        {
          "name": "activePlaceHolder",
          "description": "`activePlaceHolder` - An active place holder item reference. This is used\nfor inline drag and drop event detection so that we\nknow what element replace in context.\n\nProperty: activePlaceHolder\n\nDefault: null"
        },
        {
          "name": "sessionObject",
          "description": "`sessionObject` - Session object bridged in from a session method of some kind\n\nProperty: sessionObject\n\nDefault: [object Object]"
        },
        {
          "name": "skipExitTrap",
          "description": "`skipExitTrap` {`boolean`} - skip the exit trap to prevent losing data\n\nProperty: skipExitTrap\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "elementList",
          "description": "`elementList` - Available elements keyed by tagName and with\ntheir haxProperties centrally registered.\n\nProperty: elementList\n\nDefault: [object Object]"
        },
        {
          "name": "elementAlign",
          "description": "`elementAlign` {`string`} - element align\n\nProperty: elementAlign\n\nDefault: right"
        },
        {
          "name": "trayStatus",
          "description": "`trayStatus` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\nProperty: trayStatus\n\nDefault: collapsed"
        },
        {
          "name": "trayDetail",
          "description": "`trayDetail` {`string`} - which panel is active int he tray: content-edit, view-source, etc.\n\nProperty: trayDetail\n\nDefault: content-edit"
        },
        {
          "name": "staxList",
          "description": "`staxList` {`any[]`} - Available hax stax which are just re-usable templates\n\nProperty: staxList\n\nDefault: "
        },
        {
          "name": "connectionRewrites",
          "description": "`connectionRewrites` - Support for deploy specific rewriting for things like JWTs\n\nProperty: connectionRewrites\n\nDefault: [object Object]"
        },
        {
          "name": "voice-debug",
          "description": "`voice-debug` {`boolean`} - \n\nProperty: voiceDebug\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "validTagList",
          "description": "`validTagList` {`any[]`} - Valid tag list, tag only and including primatives for a baseline.\n\nProperty: validTagList"
        },
        {
          "name": "validGridTagList",
          "description": "`validGridTagList` {`any[]`} - Valid tag list, tag only and including primatives for a baseline.\n\nProperty: validGridTagList"
        },
        {
          "name": "validGizmoTypes",
          "description": "`validGizmoTypes` {`any[]`} - Gizmo types which can be used to bridge apps to gizmos.\n\nProperty: validGizmoTypes"
        },
        {
          "name": "_isSandboxed",
          "description": "`_isSandboxed` {`boolean`} - Sandboxed environment test\n\nProperty: _isSandboxed",
          "valueSet": "v"
        },
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "haxProperties",
          "description": "`haxProperties` - haxProperties\n\nProperty: haxProperties"
        },
        {
          "name": "onhax-insert-content",
          "description": "`hax-insert-content` {`CustomEvent<{ tag: any; properties: any; content: string; gizmo: any; }>`} - "
        },
        {
          "name": "onhax-store-write",
          "description": "`hax-store-write` {`CustomEvent<{ property: any; value: any; owner: any; }>`} - "
        },
        {
          "name": "onsimple-toast-show",
          "description": "`simple-toast-show` {`CustomEvent<{ text: any; duration: number; classStyle: string; closeText: string; eventCallback: any; }>`} - "
        },
        {
          "name": "onhax-store-app-store-loaded",
          "description": "`hax-store-app-store-loaded` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onhax-store-ready",
          "description": "`hax-store-ready` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onhax-cancel",
          "description": "`hax-cancel` {`CustomEvent<any>`} - "
        },
        {
          "name": "onplace-holder-file-drop",
          "description": "`place-holder-file-drop` {`CustomEvent<any>`} - "
        },
        {
          "name": "onhax-store-property-updated",
          "description": "`hax-store-property-updated` {`CustomEvent<{ property: any; value: any; owner: any; }>`} - "
        }
      ]
    },
    {
      "name": "hax-text-context",
      "description": "`hax-text-context`\n\nEvents:\n\n  * `hax-context-item-selected` {`CustomEvent<{ eventName: string; value: string; }>`} - \n\n  * `hax-context-menu-changed` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `_showIndent` {`boolean`} - \n\n  * `_showLists` {`boolean`} - \n\n  * `has-selected-text` {`boolean`} - calculated boolean off of if there is currently text\n\n  * `sourceView` {`boolean`} - \n\n  * `formattingList` {`any[]`} - \n\n  * `realSelectedValue` {`string`} - \n\n  * `format-icon` {`string`} - Selected item icon\n\n  * `is-safari` {`boolean`} - Is this safari\n\n  * `t` - \n\n  * `view-source` {`boolean`} - \n\nProperties:\n\n  * `textFormatLookup` - \n\n  * `_showIndent` {`boolean`} - \n\n  * `_showLists` {`boolean`} - \n\n  * `hasSelectedText` {`boolean`} - calculated boolean off of if there is currently text\n\n  * `sourceView` {`boolean`} - \n\n  * `haxUIElement` {`boolean`} - \n\n  * `formattingList` {`any[]`} - \n\n  * `realSelectedValue` {`string`} - \n\n  * `formatIcon` {`string`} - Selected item icon\n\n  * `isSafari` {`boolean`} - Is this safari\n\n  * `t` - \n\n  * `viewSource` {`boolean`} - \n\n  * `tourName` {`string`} - ",
      "attributes": [
        {
          "name": "_showIndent",
          "description": "`_showIndent` {`boolean`} - \n\nProperty: _showIndent",
          "valueSet": "v"
        },
        {
          "name": "_showLists",
          "description": "`_showLists` {`boolean`} - \n\nProperty: _showLists",
          "valueSet": "v"
        },
        {
          "name": "has-selected-text",
          "description": "`has-selected-text` {`boolean`} - calculated boolean off of if there is currently text\n\nProperty: hasSelectedText",
          "valueSet": "v"
        },
        {
          "name": "sourceView",
          "description": "`sourceView` {`boolean`} - \n\nProperty: sourceView\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "formattingList",
          "description": "`formattingList` {`any[]`} - \n\nProperty: formattingList\n\nDefault: [object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]"
        },
        {
          "name": "realSelectedValue",
          "description": "`realSelectedValue` {`string`} - \n\nProperty: realSelectedValue\n\nDefault: p"
        },
        {
          "name": "format-icon",
          "description": "`format-icon` {`string`} - Selected item icon\n\nProperty: formatIcon\n\nDefault: hax:paragraph"
        },
        {
          "name": "is-safari",
          "description": "`is-safari` {`boolean`} - Is this safari\n\nProperty: isSafari",
          "valueSet": "v"
        },
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "view-source",
          "description": "`view-source` {`boolean`} - \n\nProperty: viewSource\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "onhax-context-item-selected",
          "description": "`hax-context-item-selected` {`CustomEvent<{ eventName: string; value: string; }>`} - "
        },
        {
          "name": "onhax-context-menu-changed",
          "description": "`hax-context-menu-changed` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "hax-text-editor-button",
      "description": "`hax-text-editor-button`\na custom-element button for hax text editor (custom buttons can extend this)\n\nEvents:\n\n  * `rich-text-editor-prompt-closed` {`CustomEvent<this>`} - \n\n  * `rich-text-editor-prompt-open` {`CustomEvent<this>`} - \n\n  * `highlight` {`CustomEvent<boolean>`} - \n\n  * `highlightnode` {`CustomEvent<any>`} - \n\n  * `selectrange` {`CustomEvent<any>`} - \n\n  * `selectnode` {`CustomEvent<any>`} - \n\n  * `selectnodeccontents` {`CustomEvent<any>`} - \n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: string; commandVal: string; range: any; button: this; }>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `element` - \n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `fields` {`any[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `prompt` - prompt that pops up when button is pressed\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `__selection` - highlight surrounding selected range\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `show-tooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperties:\n\n  * `element` - \n\n  * `tag` {`string`} - \n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `promptCommand` - determines which command based on values passed from prompt\n(can be overriden for custom prompt  commands)\n\n  * `promptCommandVal` - overriden from RichTextEditorPromptButtonBehaviors:\nto determin if gizmo will be inserted\n\n  * `setsInnerHTML` {`boolean`} - determines if prompt also sets innerHTML of range\n(can be overriden for custom prompts)\n\n  * `editableSelection` {`boolean`} - \n\n  * `fields` {`any[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `prompt` - prompt that pops up when button is pressed\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `tagsArray` {`string[]`} - tagslist as an array\n\n  * `__selection` - highlight surrounding selected range\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `showTooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggledTooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`boolean`} - whether button is toggled\n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | TemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | TemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | TemplateResult<1>`} - template for button tooltip\n\n  * `buttonTemplate` {`TemplateResult<1>`} - template for button, based on whether or not the button toggles\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - \n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys",
      "attributes": [
        {
          "name": "element",
          "description": "`element` - \n\nProperty: element"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - is element a custom inline widget element?\n\nProperty: id"
        },
        {
          "name": "__wrap",
          "description": "`__wrap` - contents node inside selected range\n\nProperty: __wrap"
        },
        {
          "name": "__oldValue",
          "description": "`__oldValue` - contents node inside selected range\n\nProperty: __oldValue"
        },
        {
          "name": "fields",
          "description": "`fields` {`any[]`} - fields for prompt popover.\n\nProperty: fields\n\nDefault: [object Object]"
        },
        {
          "name": "value",
          "description": "`value` - prefilled value of prompt\n\nProperty: value\n\nDefault: [object Object]"
        },
        {
          "name": "prompt",
          "description": "`prompt` - prompt that pops up when button is pressed\n\nProperty: prompt"
        },
        {
          "name": "command",
          "description": "`command` {`string`} - The command used for document.execCommand.\n\nProperty: command\n\nDefault: insertHTML"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "range",
          "description": "`range` - The active selected range, inherited from the toolbar\n\nProperty: range"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "__selection",
          "description": "`__selection` - highlight surrounding selected range\n\nProperty: __selection"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: span"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional iron icon name for the button.\n\nProperty: icon"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label"
        },
        {
          "name": "show-tooltip",
          "description": "`show-tooltip` {`boolean`} - Alway show tooltip.\n\nProperty: showTooltip",
          "valueSet": "v"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled",
          "valueSet": "v"
        },
        {
          "name": "toggled-tooltip",
          "description": "`toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledTooltip"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "onrich-text-editor-prompt-closed",
          "description": "`rich-text-editor-prompt-closed` {`CustomEvent<this>`} - "
        },
        {
          "name": "onrich-text-editor-prompt-open",
          "description": "`rich-text-editor-prompt-open` {`CustomEvent<this>`} - "
        },
        {
          "name": "onhighlight",
          "description": "`highlight` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onhighlightnode",
          "description": "`highlightnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectrange",
          "description": "`selectrange` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnode",
          "description": "`selectnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnodeccontents",
          "description": "`selectnodeccontents` {`CustomEvent<any>`} - "
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: string; commandVal: string; range: any; button: this; }>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "hax-text-editor-toolbar",
      "description": "`hax-text-editor-toolbar`\na customized toolbar (with buttons) for HAX\n\nEvents:\n\n  * `cancel` {`CustomEvent<this>`} - \n\n  * `disableediting` {`CustomEvent<this>`} - \n\n  * `highlight` {`CustomEvent<boolean>`} - \n\n  * `rich-text-editor-register` {`CustomEvent<{ remove: boolean; toolbar: this; }>`} - \n\n  * `setrange` {`CustomEvent<{ editor: any; range: any; }>`} - \n\n  * `selectnode` {`CustomEvent<any>`} - \n\n  * `selectnodecontents` {`CustomEvent<any>`} - \n\n  * `selectrange` {`CustomEvent<any>`} - \n\n  * `pastefromclipboard` {`CustomEvent<any>`} - \n\n  * `shortcut-key-pressed` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `__registeredElements` - \n\n  * `__updated` {`boolean`} - \n\n  * `editor` - `rich-text-editor` element that is currently in `editing` mode\n\n  * `savedSelection` - current text selected range.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `registered` {`boolean`} - selection singleton\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to a toolbar\n\n  * `paste-disabled` {`boolean`} - hides paste button in Firefox\n\n  * `__promptOpen` {`boolean`} - whether prompt is open\n\n  * `__selection` - selection singleton\n\n  * `clickableElements` - Tracks inline widgets that require selection data\n\n  * `breadcrumbs-label` {`string`} - The label for the breadcrums area.\n\n  * `breadcrumbs-select-all-label` {`string`} - The label for the breadcrums area.\n\n  * `always-expanded` {`boolean`} - always expanded so more button is unnecessary?\n\n  * `id` {`string`} - `rich-text-editor` unique id\n\n  * `more-shortcuts` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `collapse-disabled` {`boolean`} - whether there is no need to collapse\n\n  * `config` {`any[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `__buttons` {`any[]`} - raw array of buttons\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `shortcut-keys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperties:\n\n  * `tag` - \n\n  * `__registeredElements` - \n\n  * `__updated` {`boolean`} - \n\n  * `hasBreadcrumbs` {`boolean`} - whether or not toolbar breadcrumbs\n(override to force a toolbar to always use or not use them)\n\n  * `undoButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for an undo button\n\n  * `redoButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for a redo button\n\n  * `historyButtonGroup` {`{ type: string; buttons: { command: string; icon: string; label: string; shortcutKeys: string; type: string; }[]; }`} - default config for a history button group: undo + redo\n\n  * `formatButton` {`{ label: string; type: string; }`} - default config for a format button\n\n  * `boldButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; toggles: boolean; type: string; }`} - default config for a bold button\n\n  * `italicButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; toggles: boolean; type: string; }`} - default config for an italic button\n\n  * `underlineButton` {`{ type: string; }`} - default config for an underline button\n\n  * `removeFormatButton` {`{ command: string; icon: string; label: string; type: string; }`} - default config for a remove format button\n\n  * `basicInlineButtonGroup` {`{ type: string; buttons: { label: string; type: string; }[]; }`} - default config for a style button group: format, bold, italic, and remove format\n\n  * `linkButton` {`{ icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for a link button\n\n  * `linkButtonGroup` {`{ type: string; buttons: { icon: string; label: string; shortcutKeys: string; type: string; }[]; }`} - default config for a link button group: link\n\n  * `cutButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for a cut button\n\n  * `copyButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for a copy button\n\n  * `pasteButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for a paste button\n\n  * `clipboardButtonGroup` {`{ type: string; buttons: { command: string; icon: string; label: string; shortcutKeys: string; type: string; }[]; }`} - default config for a clipboard button group: cut, copy, and paste\n\n  * `subscriptButton` {`{ command: string; icon: string; label: string; toggles: boolean; type: string; }`} - default config for a subscript button\n\n  * `superscriptButton` {`{ command: string; icon: string; label: string; toggles: boolean; type: string; }`} - default config for a superscript button\n\n  * `scriptButtonGroup` {`{ type: string; buttons: { command: string; icon: string; label: string; toggles: boolean; type: string; }[]; }`} - default config for a script button group: subscript & superscript\n\n  * `symbolButton` {`{ symbolTypes: string[]; type: string; }`} - default config for a symbol button\n\n  * `emojiButton` {`{ type: string; }`} - default config for an emoji button\n\n  * `imageButton` {`{ type: string; }`} - default config for an image button\n\n  * `insertButtonGroup` {`{ type: string; buttons: { type: string; }[]; }`} - default config for an insert button group: image\n\n  * `orderedListButton` {`{ command: string; icon: string; label: string; toggles: boolean; type: string; }`} - default config for an ordered list button\n\n  * `unorderedListButton` {`{ command: string; icon: string; label: string; toggles: boolean; type: string; }`} - default config for an unordered list button\n\n  * `blockquoteButton` {`{ command: string; commandVal: string; label: string; icon: string; shortcutKeys: string; type: string; }`} - default config for a blockquote button\n\n  * `indentButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for an indent button\n\n  * `outdentButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for an outdent button\n\n  * `listIndentButtonGroup` {`{ type: string; buttons: ({ command: string; icon: string; label: string; toggles: boolean; type: string; } | { command: string; icon: string; label: string; shortcutKeys: string; type: string; })[]; }`} - default config for a list and indent button group:\nordered, unordered, blockquote, indent, outdent\n\n  * `saveButton` {`{ command: string; icon: string; label: string; type: string; }`} - default config for an save button\n\n  * `closeButton` {`{ command: string; icon: string; label: string; type: string; }`} - default config for a close button\n\n  * `saveCloseButtonGroup` {`{ type: string; buttons: { command: string; icon: string; label: string; type: string; }[]; }`} - default config for a save and close button group: save and close\n\n  * `sourceButton` {`{ type: string; }`} - default config for a view source button\n\n  * `sourceButtonGroup` {`{ type: string; buttons: { type: string; }[]; }`} - default config for a source button group: view source\n\n  * `defaultConfig` {`any[]`} - default config for toolbar with\ndefault history, style, link, clipboard, script, insert, and list button groups\n\n  * `miniConfig` {`({ type: string; buttons: { icon: string; label: string; shortcutKeys: string; type: string; }[]; } | { type: string; buttons: { command: string; icon: string; label: string; type: string; }[]; })[]`} - default config for toolbar with\ndefault a custom group of style buttons,\ndefault link button group,\ndefault script button group,\nand a custom list button groups\n\n  * `miniTemplate` {`TemplateResult<1>`} - a template that places toolbar in a container\nso that it can be positioned absolutely\n\n  * `editor` - `rich-text-editor` element that is currently in `editing` mode\n\n  * `savedSelection` - current text selected range.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `registered` {`boolean`} - selection singleton\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to a toolbar\n\n  * `__pasteDisabled` {`boolean`} - hides paste button in Firefox\n\n  * `__promptOpen` {`boolean`} - whether prompt is open\n\n  * `__selection` - selection singleton\n\n  * `controls` {`string`} - id of editor currently being controlled\n\n  * `disconnected` {`boolean`} - determines if the toolbar is hidden\n\n  * `noSelection` {`boolean`} - determines if the toolbar has an extive selection\n\n  * `clickableElements` - Tracks inline widgets that require selection data\n\n  * `breadcrumbsLabel` {`string`} - The label for the breadcrums area.\n\n  * `breadcrumbsSelectAllLabel` {`string`} - The label for the breadcrums area.\n\n  * `alwaysExpanded` {`boolean`} - always expanded so more button is unnecessary?\n\n  * `id` {`string`} - `rich-text-editor` unique id\n\n  * `moreShortcuts` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\n  * `buttons` {`any[]`} - array of rendered buttons\n\n  * `focused` {`boolean`} - does toolbar have focus\n\n  * `hovered` {`boolean`} - is mouseover toolbar\n\n  * `moreButton` {`TemplateResult<1>`} - more button's template\n\n  * `toolbarTemplate` - default toolbar template uses simple-toolbar\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `collapseDisabled` {`boolean`} - whether there is no need to collapse\n\n  * `config` {`any[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `__buttons` {`any[]`} - raw array of buttons\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `icon` {`string`} - \n\n  * `label` {`string`} - \n\n  * `toggledLabel` {`string`} - \n\n  * `showTextLabel` {`boolean`} - \n\n  * `shortcut` {`string`} - \n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `shortcutKeys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.",
      "attributes": [
        {
          "name": "__registeredElements",
          "description": "`__registeredElements` - \n\nProperty: __registeredElements\n\nDefault: "
        },
        {
          "name": "__updated",
          "description": "`__updated` {`boolean`} - \n\nProperty: __updated\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "editor",
          "description": "`editor` - `rich-text-editor` element that is currently in `editing` mode\n\nProperty: editor"
        },
        {
          "name": "savedSelection",
          "description": "`savedSelection` - current text selected range.\n\nProperty: savedSelection"
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "registered",
          "description": "`registered` {`boolean`} - selection singleton\n\nProperty: registered",
          "valueSet": "v"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "show",
          "description": "`show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to a toolbar\n\nProperty: show"
        },
        {
          "name": "paste-disabled",
          "description": "`paste-disabled` {`boolean`} - hides paste button in Firefox\n\nProperty: __pasteDisabled",
          "valueSet": "v"
        },
        {
          "name": "__promptOpen",
          "description": "`__promptOpen` {`boolean`} - whether prompt is open\n\nProperty: __promptOpen",
          "valueSet": "v"
        },
        {
          "name": "__selection",
          "description": "`__selection` - selection singleton\n\nProperty: __selection"
        },
        {
          "name": "clickableElements",
          "description": "`clickableElements` - Tracks inline widgets that require selection data\n\nProperty: clickableElements\n\nDefault: [object Object]"
        },
        {
          "name": "breadcrumbs-label",
          "description": "`breadcrumbs-label` {`string`} - The label for the breadcrums area.\n\nProperty: breadcrumbsLabel\n\nDefault: Select"
        },
        {
          "name": "breadcrumbs-select-all-label",
          "description": "`breadcrumbs-select-all-label` {`string`} - The label for the breadcrums area.\n\nProperty: breadcrumbsSelectAllLabel\n\nDefault: All"
        },
        {
          "name": "always-expanded",
          "description": "`always-expanded` {`boolean`} - always expanded so more button is unnecessary?\n\nProperty: alwaysExpanded",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - `rich-text-editor` unique id\n\nProperty: id"
        },
        {
          "name": "more-shortcuts",
          "description": "`more-shortcuts` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperty: moreShortcuts"
        },
        {
          "name": "collapsed",
          "description": "`collapsed` {`boolean`} - is toolbar collapsed?\n\nProperty: collapsed\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "collapse-disabled",
          "description": "`collapse-disabled` {`boolean`} - whether there is no need to collapse\n\nProperty: collapseDisabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "config",
          "description": "`config` {`any[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\nProperty: config\n\nDefault: basicInlineButtonGroup,linkButtonGroup,scriptButtonGroup,listIndentButtonGroup"
        },
        {
          "name": "__buttons",
          "description": "`__buttons` {`any[]`} - raw array of buttons\n\nProperty: __buttons\n\nDefault: "
        },
        {
          "name": "__focused",
          "description": "`__focused` {`boolean`} - whether toolbar has focus\n\nProperty: __focused\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__hovered",
          "description": "`__hovered` {`boolean`} - whether toolbar is hovered\n\nProperty: __hovered\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "sticky",
          "description": "`sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\nProperty: sticky\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperty: shortcutKeys\n\nDefault: [object Object]"
        },
        {
          "name": "oncancel",
          "description": "`cancel` {`CustomEvent<this>`} - "
        },
        {
          "name": "ondisableediting",
          "description": "`disableediting` {`CustomEvent<this>`} - "
        },
        {
          "name": "onhighlight",
          "description": "`highlight` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onrich-text-editor-register",
          "description": "`rich-text-editor-register` {`CustomEvent<{ remove: boolean; toolbar: this; }>`} - "
        },
        {
          "name": "onsetrange",
          "description": "`setrange` {`CustomEvent<{ editor: any; range: any; }>`} - "
        },
        {
          "name": "onselectnode",
          "description": "`selectnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnodecontents",
          "description": "`selectnodecontents` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectrange",
          "description": "`selectrange` {`CustomEvent<any>`} - "
        },
        {
          "name": "onpastefromclipboard",
          "description": "`pastefromclipboard` {`CustomEvent<any>`} - "
        },
        {
          "name": "onshortcut-key-pressed",
          "description": "`shortcut-key-pressed` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "hax-text-editor",
      "description": "`hax-text-editor`\nHAX-specific implementation of rich-text-editor\n\nEvents:\n\n  * `editing-disabled` {`CustomEvent<any>`} - \n\n  * `editing-enabled` {`CustomEvent<any>`} - \n\n  * `focus` {`CustomEvent<any>`} - \n\n  * `rich-text-editor-register` {`CustomEvent<{ remove: boolean; editor: this; }>`} - \n\n  * `getrange` {`CustomEvent<this>`} - \n\n  * `pastefromclipboard` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `disable-hover` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `rawhtml` {`string`} - raw html\n\n  * `updateRange` {`boolean`} - whether to update range\n\n  * `view-source` {`boolean`} - whether editor is view source code mode\n\n  * `__canceledEdits` - contains cancelled edits\n\n  * `__connectedToolbar` - connected toolbar\n\n  * `__codeEditorValue` {`string`} - code-editor for view source\n\n  * `__needsUpdate` {`boolean`} - has focus\n\n  * `placeholder` {`string`} - Placeholder text for empty editable regions\n\n  * `toolbar` {`string`} - id for toolbar\n\n  * `type` {`string`} - type of editor toolbar, i.e.\nfull - full for full toolbar with breadcrumb,\nmini - mini for mini floating toolbar, or\ndefault toolbar if neither.\n\n  * `id` {`string`} - editor's unique id\n\n  * `range` - current range\n\n  * `disabled` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `__focused` {`boolean`} - has focus\n\n  * `__hovered` {`boolean`} - is hovered\n\n  * `editing` {`boolean`} - Maps to editing attribute\n\n  * `__selection` - selection management\n\nProperties:\n\n  * `haxUIElement` {`boolean`} - \n\n  * `tag` - \n\n  * `disableHover` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `rawhtml` {`string`} - raw html\n\n  * `updateRange` {`boolean`} - whether to update range\n\n  * `viewSource` {`boolean`} - whether editor is view source code mode\n\n  * `__canceledEdits` - contains cancelled edits\n\n  * `__connectedToolbar` - connected toolbar\n\n  * `__codeEditorValue` {`string`} - code-editor for view source\n\n  * `__needsUpdate` {`boolean`} - has focus\n\n  * `observer` {`MutationObserver`} - mutation observer\n\n  * `placeholder` {`string`} - Placeholder text for empty editable regions\n\n  * `toolbar` {`string`} - id for toolbar\n\n  * `type` {`string`} - type of editor toolbar, i.e.\nfull - full for full toolbar with breadcrumb,\nmini - mini for mini floating toolbar, or\ndefault toolbar if neither.\n\n  * `id` {`string`} - editor's unique id\n\n  * `range` - current range\n\n  * `disabled` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `__focused` {`boolean`} - has focus\n\n  * `__hovered` {`boolean`} - is hovered\n\n  * `editing` {`boolean`} - Maps to editing attribute\n\n  * `__selection` - selection management",
      "attributes": [
        {
          "name": "disable-hover",
          "description": "`disable-hover` {`boolean`} - don't reveal toolbar on mouseover\n\nProperty: disableHover",
          "valueSet": "v"
        },
        {
          "name": "rawhtml",
          "description": "`rawhtml` {`string`} - raw html\n\nProperty: rawhtml"
        },
        {
          "name": "updateRange",
          "description": "`updateRange` {`boolean`} - whether to update range\n\nProperty: updateRange",
          "valueSet": "v"
        },
        {
          "name": "view-source",
          "description": "`view-source` {`boolean`} - whether editor is view source code mode\n\nProperty: viewSource",
          "valueSet": "v"
        },
        {
          "name": "__canceledEdits",
          "description": "`__canceledEdits` - contains cancelled edits\n\nProperty: __canceledEdits"
        },
        {
          "name": "__connectedToolbar",
          "description": "`__connectedToolbar` - connected toolbar\n\nProperty: __connectedToolbar"
        },
        {
          "name": "__codeEditorValue",
          "description": "`__codeEditorValue` {`string`} - code-editor for view source\n\nProperty: __codeEditorValue"
        },
        {
          "name": "__needsUpdate",
          "description": "`__needsUpdate` {`boolean`} - has focus\n\nProperty: __needsUpdate",
          "valueSet": "v"
        },
        {
          "name": "placeholder",
          "description": "`placeholder` {`string`} - Placeholder text for empty editable regions\n\nProperty: placeholder\n\nDefault: Click to edit"
        },
        {
          "name": "toolbar",
          "description": "`toolbar` {`string`} - id for toolbar\n\nProperty: toolbar\n\nDefault: "
        },
        {
          "name": "type",
          "description": "`type` {`string`} - type of editor toolbar, i.e.\nfull - full for full toolbar with breadcrumb,\nmini - mini for mini floating toolbar, or\ndefault toolbar if neither.\n\nProperty: type\n\nDefault: hax-text-editor-toolbar"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - editor's unique id\n\nProperty: id\n\nDefault: "
        },
        {
          "name": "range",
          "description": "`range` - current range\n\nProperty: range\n\nDefault: undefined"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - don't reveal toolbar on mouseover\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__focused",
          "description": "`__focused` {`boolean`} - has focus\n\nProperty: __focused\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__hovered",
          "description": "`__hovered` {`boolean`} - is hovered\n\nProperty: __hovered\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "editing",
          "description": "`editing` {`boolean`} - Maps to editing attribute\n\nProperty: editing\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__selection",
          "description": "`__selection` - selection management\n\nProperty: __selection"
        },
        {
          "name": "onediting-disabled",
          "description": "`editing-disabled` {`CustomEvent<any>`} - "
        },
        {
          "name": "onediting-enabled",
          "description": "`editing-enabled` {`CustomEvent<any>`} - "
        },
        {
          "name": "onfocus",
          "description": "`focus` {`CustomEvent<any>`} - "
        },
        {
          "name": "onrich-text-editor-register",
          "description": "`rich-text-editor-register` {`CustomEvent<{ remove: boolean; editor: this; }>`} - "
        },
        {
          "name": "ongetrange",
          "description": "`getrange` {`CustomEvent<this>`} - "
        },
        {
          "name": "onpastefromclipboard",
          "description": "`pastefromclipboard` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "",
      "description": "`hax-toolbar-item`\na button for hax toolbar\n\nEvents:\n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `event-name` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\n  * `tooltip` {`string`} - Hover tip text\n\n  * `danger` {`boolean`} - red warning\n\n  * `feature` {`boolean`} - Inverted display mode\n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `show-tooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggledTooltip` {`string`} - Hover tip text\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperties:\n\n  * `eventName` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\n  * `tooltip` {`string`} - Hover tip text\n\n  * `danger` {`boolean`} - red warning\n\n  * `feature` {`boolean`} - Inverted display mode\n\n  * `menu` {`boolean`} - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `showTooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggledTooltip` {`string`} - Hover tip text\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`number`} - determines if button is toggled\n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | TemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | TemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | TemplateResult<1>`} - template for button tooltip\n\n  * `buttonTemplate` {`TemplateResult<1>`} - template for button, based on whether or not the button toggles\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - \n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys",
      "attributes": [
        {
          "name": "event-name",
          "description": "`event-name` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\nProperty: eventName"
        },
        {
          "name": "tooltip",
          "description": "`tooltip` {`string`} - Hover tip text\n\nProperty: tooltip"
        },
        {
          "name": "danger",
          "description": "`danger` {`boolean`} - red warning\n\nProperty: danger\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "feature",
          "description": "`feature` {`boolean`} - Inverted display mode\n\nProperty: feature\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional iron icon name for the button.\n\nProperty: icon"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label"
        },
        {
          "name": "show-tooltip",
          "description": "`show-tooltip` {`boolean`} - Alway show tooltip.\n\nProperty: showTooltip",
          "valueSet": "v"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled",
          "valueSet": "v"
        },
        {
          "name": "toggledTooltip",
          "description": "`toggledTooltip` {`string`} - Hover tip text\n\nProperty: toggledTooltip"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "hax-toolbar-menu",
      "description": "`hax-toolbar-menu`\n`An icon / button that has support for multiple options via drop down.`\n\nEvents:\n\n  * `close` {`CustomEvent<Event>`} - Fires when menu is closed\n\n  * `open` {`CustomEvent<Event>`} - Fires when menu is opened\n\n  * `item-click` {`CustomEvent<Event>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `event-name` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\n  * `_blockEvent` {`boolean`} - Internal flag to allow blocking the event firing if machine selects tag.\n\n  * `currentItem` - Whether toggle is disabled\n\n  * `expanded` {`boolean`} - Whether toggle is disabled\n\n  * `focused` {`boolean`} - Whether button is toggled\n\n  * `hovered` {`boolean`} - Whether button is toggled\n\n  * `__menuItems` {`any[]`} - menu items in array form to move from prev to next\n\n  * `position` {`string`} - Positions list to top, right, bottom, left of its content.\n\n  * `position-align` {`string`} - Aligns list at start, or end fo target. Default is centered.\n\n  * `offset` {`number`} - spacing between top of list and menu button\n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `show-tooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `disabled` {`boolean`} - Whether toggle is disabled\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperties:\n\n  * `eventName` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\n  * `_blockEvent` {`boolean`} - Internal flag to allow blocking the event firing if machine selects tag.\n\n  * `currentItem` - Whether toggle is disabled\n\n  * `expanded` {`boolean`} - Whether toggle is disabled\n\n  * `focused` {`boolean`} - Whether button is toggled\n\n  * `hovered` {`boolean`} - Whether button is toggled\n\n  * `menuTemplate` {`TemplateResult<1>`} - template for dropdown menu\n\n  * `listItemTemplate` {`TemplateResult<1>`} - template for slotted list items\n\n  * `keyCode` {`{ TAB: number; RETURN: number; ESC: number; SPACE: number; PAGEUP: number; PAGEDOWN: number; END: number; HOME: number; LEFT: number; UP: number; RIGHT: number; DOWN: number; }`} - key code translations as object\n\n  * `__menuItems` {`any[]`} - menu items in array form to move from prev to next\n\n  * `position` {`string`} - Positions list to top, right, bottom, left of its content.\n\n  * `positionAlign` {`string`} - Aligns list at start, or end fo target. Default is centered.\n\n  * `offset` {`number`} - spacing between top of list and menu button\n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `showTooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggledTooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`number`} - determines if button is toggled\n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | TemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | TemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | TemplateResult<1>`} - template for button tooltip\n\n  * `buttonTemplate` {`TemplateResult<1>`} - template for button\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - Whether toggle is disabled\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys",
      "attributes": [
        {
          "name": "event-name",
          "description": "`event-name` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\nProperty: eventName"
        },
        {
          "name": "_blockEvent",
          "description": "`_blockEvent` {`boolean`} - Internal flag to allow blocking the event firing if machine selects tag.\n\nProperty: _blockEvent\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "currentItem",
          "description": "`currentItem` - Whether toggle is disabled\n\nProperty: currentItem"
        },
        {
          "name": "expanded",
          "description": "`expanded` {`boolean`} - Whether toggle is disabled\n\nProperty: expanded",
          "valueSet": "v"
        },
        {
          "name": "focused",
          "description": "`focused` {`boolean`} - Whether button is toggled\n\nProperty: focused",
          "valueSet": "v"
        },
        {
          "name": "hovered",
          "description": "`hovered` {`boolean`} - Whether button is toggled\n\nProperty: hovered",
          "valueSet": "v"
        },
        {
          "name": "__menuItems",
          "description": "`__menuItems` {`any[]`} - menu items in array form to move from prev to next\n\nProperty: __menuItems\n\nDefault: "
        },
        {
          "name": "position",
          "description": "`position` {`string`} - Positions list to top, right, bottom, left of its content.\n\nProperty: position\n\nDefault: bottom"
        },
        {
          "name": "position-align",
          "description": "`position-align` {`string`} - Aligns list at start, or end fo target. Default is centered.\n\nProperty: positionAlign\n\nDefault: start"
        },
        {
          "name": "offset",
          "description": "`offset` {`number`} - spacing between top of list and menu button\n\nProperty: offset\n\nDefault: 0"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional iron icon name for the button.\n\nProperty: icon"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label"
        },
        {
          "name": "show-tooltip",
          "description": "`show-tooltip` {`boolean`} - Alway show tooltip.\n\nProperty: showTooltip",
          "valueSet": "v"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled",
          "valueSet": "v"
        },
        {
          "name": "toggled-tooltip",
          "description": "`toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledTooltip"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Whether toggle is disabled\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "onclose",
          "description": "`close` {`CustomEvent<Event>`} - Fires when menu is closed"
        },
        {
          "name": "onopen",
          "description": "`open` {`CustomEvent<Event>`} - Fires when menu is opened"
        },
        {
          "name": "onitem-click",
          "description": "`item-click` {`CustomEvent<Event>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "",
      "description": "Events:\n\n  * `shortcut-key-pressed` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `selected` {`boolean`} - See what's selected\n\n  * `inline` {`boolean`} - This is an inline context menu\n\n  * `always-expanded` {`boolean`} - always expanded so more button is unnecessary?\n\n  * `id` {`string`} - unique id\n\n  * `more-shortcuts` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `collapse-disabled` {`boolean`} - whether there is no need to collapse\n\n  * `config` {`any[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `__buttons` {`any[]`} - raw array of buttons\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `shortcut-keys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperties:\n\n  * `selected` {`boolean`} - See what's selected\n\n  * `inline` {`boolean`} - This is an inline context menu\n\n  * `alwaysExpanded` {`boolean`} - always expanded so more button is unnecessary?\n\n  * `id` {`string`} - unique id\n\n  * `moreShortcuts` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\n  * `buttons` {`any[]`} - array of rendered buttons\n\n  * `focused` {`boolean`} - does toolbar have focus\n\n  * `hovered` {`boolean`} - is mouseover toolbar\n\n  * `moreButton` {`TemplateResult<1>`} - more button's template\n\n  * `toolbarTemplate` {`TemplateResult<1>`} - toolbar element's template\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `collapseDisabled` {`boolean`} - whether there is no need to collapse\n\n  * `config` {`any[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `__buttons` {`any[]`} - raw array of buttons\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `icon` {`string`} - \n\n  * `label` {`string`} - \n\n  * `toggledLabel` {`string`} - \n\n  * `showTextLabel` {`boolean`} - \n\n  * `shortcut` {`string`} - \n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `shortcutKeys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.",
      "attributes": [
        {
          "name": "selected",
          "description": "`selected` {`boolean`} - See what's selected\n\nProperty: selected\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "inline",
          "description": "`inline` {`boolean`} - This is an inline context menu\n\nProperty: inline\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "always-expanded",
          "description": "`always-expanded` {`boolean`} - always expanded so more button is unnecessary?\n\nProperty: alwaysExpanded",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - unique id\n\nProperty: id"
        },
        {
          "name": "more-shortcuts",
          "description": "`more-shortcuts` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperty: moreShortcuts"
        },
        {
          "name": "collapsed",
          "description": "`collapsed` {`boolean`} - is toolbar collapsed?\n\nProperty: collapsed\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "collapse-disabled",
          "description": "`collapse-disabled` {`boolean`} - whether there is no need to collapse\n\nProperty: collapseDisabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "config",
          "description": "`config` {`any[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\nProperty: config\n\nDefault: "
        },
        {
          "name": "__buttons",
          "description": "`__buttons` {`any[]`} - raw array of buttons\n\nProperty: __buttons\n\nDefault: "
        },
        {
          "name": "__focused",
          "description": "`__focused` {`boolean`} - whether toolbar has focus\n\nProperty: __focused\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__hovered",
          "description": "`__hovered` {`boolean`} - whether toolbar is hovered\n\nProperty: __hovered\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "sticky",
          "description": "`sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\nProperty: sticky\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperty: shortcutKeys\n\nDefault: [object Object]"
        },
        {
          "name": "onshortcut-key-pressed",
          "description": "`shortcut-key-pressed` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "hax-tray-button",
      "description": "`hax-tray-button`\n`A button in the tray`\n\nEvents:\n\n  * `hax-tray-button-click` {`CustomEvent<{ eventName: any; index: any; value: any; }>`} - \n\n  * `hax-add-voice-command` {`CustomEvent<{ command: string; context: this; callback: string; }>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `voice-command` {`string`} - Voice command to append for things that support data-voicecommand.\n\n  * `wide` {`boolean`} - \n\n  * `index` {`number`} - Index position in the original list of imports\n\n  * `event-data` {`string`} - \n\n  * `event-name` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\n  * `tooltip` {`string`} - Hover tip text\n\n  * `danger` {`boolean`} - red warning\n\n  * `feature` {`boolean`} - Inverted display mode\n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `show-tooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggledTooltip` {`string`} - Hover tip text\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperties:\n\n  * `voiceCommand` {`string`} - Voice command to append for things that support data-voicecommand.\n\n  * `wide` {`boolean`} - \n\n  * `index` {`number`} - Index position in the original list of imports\n\n  * `eventData` {`string`} - \n\n  * `eventName` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\n  * `tooltip` {`string`} - Hover tip text\n\n  * `danger` {`boolean`} - red warning\n\n  * `feature` {`boolean`} - Inverted display mode\n\n  * `menu` {`boolean`} - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `showTooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggledTooltip` {`string`} - Hover tip text\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`number`} - determines if button is toggled\n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | TemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | TemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | TemplateResult<1>`} - template for button tooltip\n\n  * `buttonTemplate` {`TemplateResult<1>`} - template for button, based on whether or not the button toggles\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - \n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys",
      "attributes": [
        {
          "name": "voice-command",
          "description": "`voice-command` {`string`} - Voice command to append for things that support data-voicecommand.\n\nProperty: voiceCommand"
        },
        {
          "name": "wide",
          "description": "`wide` {`boolean`} - \n\nProperty: wide",
          "valueSet": "v"
        },
        {
          "name": "index",
          "description": "`index` {`number`} - Index position in the original list of imports\n\nProperty: index"
        },
        {
          "name": "event-data",
          "description": "`event-data` {`string`} - \n\nProperty: eventData\n\nDefault: null"
        },
        {
          "name": "event-name",
          "description": "`event-name` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\nProperty: eventName"
        },
        {
          "name": "tooltip",
          "description": "`tooltip` {`string`} - Hover tip text\n\nProperty: tooltip"
        },
        {
          "name": "danger",
          "description": "`danger` {`boolean`} - red warning\n\nProperty: danger\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "feature",
          "description": "`feature` {`boolean`} - Inverted display mode\n\nProperty: feature\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional iron icon name for the button.\n\nProperty: icon"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label"
        },
        {
          "name": "show-tooltip",
          "description": "`show-tooltip` {`boolean`} - Alway show tooltip.\n\nProperty: showTooltip",
          "valueSet": "v"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled",
          "valueSet": "v"
        },
        {
          "name": "toggledTooltip",
          "description": "`toggledTooltip` {`string`} - Hover tip text\n\nProperty: toggledTooltip"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "onhax-tray-button-click",
          "description": "`hax-tray-button-click` {`CustomEvent<{ eventName: any; index: any; value: any; }>`} - "
        },
        {
          "name": "onhax-add-voice-command",
          "description": "`hax-add-voice-command` {`CustomEvent<{ command: string; context: this; callback: string; }>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "hax-tray-upload",
      "description": "Events:\n\n  * `click` {`CustomEvent<any>`} - \n\n  * `value-changed` {`CustomEvent<{ value: any; }>`} - \n\n  * `upload-before` {`CustomEvent<any>`} - \n\n  * `upload-response` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `t` - \n\n  * `accept` {`string`} - Hint for expected file type in file upload controls\n\n  * `autofocus` {`boolean`} - Automatically focus on field when the page is loaded\n\n  * `value` {`string`} - \n\n  * `option` {`string`} - \n\n  * `autocomplete` {`string`} - Hint for form autofill feature\n\n  * `no-camera` {`boolean`} - Used when we want to ensure there is not a web cam option like video upload.\n\n  * `no-voice-record` {`boolean`} - No Voice Recording\n\n  * `disabled` {`boolean`} - whether the tabbed interface is disabled\n\n  * `error` {`boolean`} - whether fieldset has fields with errors\n\n  * `hidden` {`boolean`} - whether the tabbed interface is hidden\n\n  * `readonly` {`boolean`} - whether the tabbed interface is hidden\n\n  * `label` {`string`} - fieldset legend\n\n  * `name` {`string`} - unique name\n\n  * `description` {`string`} - optional description\n\nProperties:\n\n  * `__winEvents` - \n\n  * `t` - \n\n  * `accept` {`string`} - Hint for expected file type in file upload controls\n\n  * `autofocus` {`boolean`} - Automatically focus on field when the page is loaded\n\n  * `value` {`string`} - \n\n  * `option` {`string`} - \n\n  * `field` - \n\n  * `autocomplete` {`string`} - Hint for form autofill feature\n\n  * `noCamera` {`boolean`} - Used when we want to ensure there is not a web cam option like video upload.\n\n  * `noVoiceRecord` {`boolean`} - No Voice Recording\n\n  * `legend` {`TemplateResult<1>`} - \n\n  * `desc` {`TemplateResult<1>`} - \n\n  * `fields` {`TemplateResult<1>`} - LitElement life cycle - render callback\n\n  * `disabled` {`boolean`} - whether the tabbed interface is disabled\n\n  * `error` {`boolean`} - whether fieldset has fields with errors\n\n  * `hidden` {`boolean`} - whether the tabbed interface is hidden\n\n  * `readonly` {`boolean`} - whether the tabbed interface is hidden\n\n  * `label` {`string`} - fieldset legend\n\n  * `name` {`string`} - unique name\n\n  * `description` {`string`} - optional description",
      "attributes": [
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "accept",
          "description": "`accept` {`string`} - Hint for expected file type in file upload controls\n\nProperty: accept"
        },
        {
          "name": "autofocus",
          "description": "`autofocus` {`boolean`} - Automatically focus on field when the page is loaded\n\nProperty: autofocus",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "`value` {`string`} - \n\nProperty: value"
        },
        {
          "name": "option",
          "description": "`option` {`string`} - \n\nProperty: option"
        },
        {
          "name": "autocomplete",
          "description": "`autocomplete` {`string`} - Hint for form autofill feature\n\nProperty: autocomplete\n\nDefault: on"
        },
        {
          "name": "no-camera",
          "description": "`no-camera` {`boolean`} - Used when we want to ensure there is not a web cam option like video upload.\n\nProperty: noCamera\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "no-voice-record",
          "description": "`no-voice-record` {`boolean`} - No Voice Recording\n\nProperty: noVoiceRecord\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - whether the tabbed interface is disabled\n\nProperty: disabled",
          "valueSet": "v"
        },
        {
          "name": "error",
          "description": "`error` {`boolean`} - whether fieldset has fields with errors\n\nProperty: error",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "`hidden` {`boolean`} - whether the tabbed interface is hidden\n\nProperty: hidden",
          "valueSet": "v"
        },
        {
          "name": "readonly",
          "description": "`readonly` {`boolean`} - whether the tabbed interface is hidden\n\nProperty: readonly",
          "valueSet": "v"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - fieldset legend\n\nProperty: label"
        },
        {
          "name": "name",
          "description": "`name` {`string`} - unique name\n\nProperty: name"
        },
        {
          "name": "description",
          "description": "`description` {`string`} - optional description\n\nProperty: description"
        },
        {
          "name": "onclick",
          "description": "`click` {`CustomEvent<any>`} - "
        },
        {
          "name": "onvalue-changed",
          "description": "`value-changed` {`CustomEvent<{ value: any; }>`} - "
        },
        {
          "name": "onupload-before",
          "description": "`upload-before` {`CustomEvent<any>`} - "
        },
        {
          "name": "onupload-response",
          "description": "`upload-response` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "hax-tray",
      "description": "`hax-tray`\n`The tray / dashboard area which allows for customization of all major settings`\n\nEvents:\n\n  * `hax-insert-content-array` {`CustomEvent<any>`} - \n\n  * `hax-insert-content` {`CustomEvent<any>`} - \n\n  * `hax-register-core-piece` {`CustomEvent<{ piece: string; object: this; }>`} - \n\n  * `hax-add-voice-command` {`CustomEvent<{ command: string; context: any; callback: string; }>`} - \n\n  * `hax-context-item-selected` {`CustomEvent<{ eventName: any; value: any; }>`} - \n\n  * `simple-modal-hide` {`CustomEvent<{}>`} - \n\n  * `hax-save` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `offset-margin` {`string`} - \n\n  * `appStoreLoaded` {`boolean`} - \n\n  * `light` {`boolean`} - Light variant for save button\n\n  * `haxUiTheme` {`string`} - \n\n  * `hide-preferences-button` {`boolean`} - Showing preferences area.\n\n  * `hide-panel-ops` {`boolean`} - Showing button area at all a well as internal\nstate managing buttons like cancel and save\n\n  * `globalPreferences` - Global preferences for HAX overall\n\n  * `activeNode` - Global active node so we know if we need to disable contextual settings\n\n  * `activeGizmo` - \n\n  * `edit-mode` {`boolean`} - State of the panel\n\n  * `trayLabel` {`string`} - heading of toggled section in tray\n\n  * `tourOpened` {`string`} - \n\n  * `__tour` - \n\n  * `activeValue` - Form values for active node\n\n  * `collapsed` {`boolean`} - \n\n  * `activeSchema` - Form schema for active node\n\n  * `can-undo` {`boolean`} - If we can currently undo based on stack position\n\n  * `can-redo` {`boolean`} - If we can currently redo based on stack position\n\n  * `tray-detail` {`string`} - id of toggled section in tray\n\n  * `activeTagName` {`string`} - Element name / what to display based on active element\n\n  * `traySizeIcon` {`string`} - \n\n  * `element-align` {`string`} - Alignment of the initial edit button\n\n  * `t` - \n\nProperties:\n\n  * `trayStatus` {`string`} - \n\n  * `panelOpsTemplate` {`\"\" | TemplateResult<1>`} - \n\n  * `toolbarsTemplate` {`TemplateResult<1>`} - \n\n  * `menuToolbarTemplate` {`TemplateResult<1>`} - \n\n  * `menuButtons` {`TemplateResult<1>`} - \n\n  * `saveButtons` {`\"\" | TemplateResult<1>`} - \n\n  * `doButtons` {`TemplateResult<1>`} - \n\n  * `contentButtons` {`TemplateResult<1>`} - \n\n  * `moreButtons` {`TemplateResult<1>`} - \n\n  * `trayDetailTemplate` {`TemplateResult<1>`} - \n\n  * `viewSourceTemplate` {`TemplateResult<1>`} - \n\n  * `advancedSettingsTemplate` {`TemplateResult<1>`} - \n\n  * `contentEditTemplate` {`TemplateResult<1>`} - \n\n  * `contentAddTemplate` {`TemplateResult<1>`} - \n\n  * `contentMapTemplate` {`TemplateResult<1>`} - \n\n  * `mediaTemplate` {`TemplateResult<1>`} - \n\n  * `offsetMargin` {`string`} - \n\n  * `appStoreLoaded` {`boolean`} - \n\n  * `light` {`boolean`} - Light variant for save button\n\n  * `haxUiTheme` {`string`} - \n\n  * `hidePreferencesButton` {`boolean`} - Showing preferences area.\n\n  * `hidePanelOps` {`boolean`} - Showing button area at all a well as internal\nstate managing buttons like cancel and save\n\n  * `globalPreferences` - Global preferences for HAX overall\n\n  * `activeNode` - Global active node so we know if we need to disable contextual settings\n\n  * `activeGizmo` - \n\n  * `editMode` {`boolean`} - State of the panel\n\n  * `trayLabel` {`string`} - heading of toggled section in tray\n\n  * `tourOpened` {`string`} - \n\n  * `__tour` - \n\n  * `__winEvents` - \n\n  * `_initial` {`boolean`} - \n\n  * `activeValue` - Form values for active node\n\n  * `collapsed` {`boolean`} - \n\n  * `activeTab` {`string`} - \n\n  * `activeSchema` - Form schema for active node\n\n  * `canUndo` {`boolean`} - If we can currently undo based on stack position\n\n  * `canRedo` {`boolean`} - If we can currently redo based on stack position\n\n  * `trayDetail` {`string`} - id of toggled section in tray\n\n  * `activeTagName` {`string`} - Element name / what to display based on active element\n\n  * `traySizeIcon` {`string`} - \n\n  * `elementAlign` {`string`} - Alignment of the initial edit button\n\n  * `__setup` {`boolean`} - \n\n  * `t` - \n\n  * `tourName` {`string`} - ",
      "attributes": [
        {
          "name": "offset-margin",
          "description": "`offset-margin` {`string`} - \n\nProperty: offsetMargin"
        },
        {
          "name": "appStoreLoaded",
          "description": "`appStoreLoaded` {`boolean`} - \n\nProperty: appStoreLoaded",
          "valueSet": "v"
        },
        {
          "name": "light",
          "description": "`light` {`boolean`} - Light variant for save button\n\nProperty: light",
          "valueSet": "v"
        },
        {
          "name": "haxUiTheme",
          "description": "`haxUiTheme` {`string`} - \n\nProperty: haxUiTheme"
        },
        {
          "name": "hide-preferences-button",
          "description": "`hide-preferences-button` {`boolean`} - Showing preferences area.\n\nProperty: hidePreferencesButton",
          "valueSet": "v"
        },
        {
          "name": "hide-panel-ops",
          "description": "`hide-panel-ops` {`boolean`} - Showing button area at all a well as internal\nstate managing buttons like cancel and save\n\nProperty: hidePanelOps",
          "valueSet": "v"
        },
        {
          "name": "globalPreferences",
          "description": "`globalPreferences` - Global preferences for HAX overall\n\nProperty: globalPreferences"
        },
        {
          "name": "activeNode",
          "description": "`activeNode` - Global active node so we know if we need to disable contextual settings\n\nProperty: activeNode"
        },
        {
          "name": "activeGizmo",
          "description": "`activeGizmo` - \n\nProperty: activeGizmo"
        },
        {
          "name": "edit-mode",
          "description": "`edit-mode` {`boolean`} - State of the panel\n\nProperty: editMode",
          "valueSet": "v"
        },
        {
          "name": "trayLabel",
          "description": "`trayLabel` {`string`} - heading of toggled section in tray\n\nProperty: trayLabel"
        },
        {
          "name": "tourOpened",
          "description": "`tourOpened` {`string`} - \n\nProperty: tourOpened"
        },
        {
          "name": "__tour",
          "description": "`__tour` - \n\nProperty: __tour"
        },
        {
          "name": "activeValue",
          "description": "`activeValue` - Form values for active node\n\nProperty: activeValue\n\nDefault: [object Object]"
        },
        {
          "name": "collapsed",
          "description": "`collapsed` {`boolean`} - \n\nProperty: collapsed\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "activeSchema",
          "description": "`activeSchema` - Form schema for active node\n\nProperty: activeSchema\n\nDefault: "
        },
        {
          "name": "can-undo",
          "description": "`can-undo` {`boolean`} - If we can currently undo based on stack position\n\nProperty: canUndo\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "can-redo",
          "description": "`can-redo` {`boolean`} - If we can currently redo based on stack position\n\nProperty: canRedo\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "tray-detail",
          "description": "`tray-detail` {`string`} - id of toggled section in tray\n\nProperty: trayDetail\n\nDefault: content-edit"
        },
        {
          "name": "activeTagName",
          "description": "`activeTagName` {`string`} - Element name / what to display based on active element\n\nProperty: activeTagName\n\nDefault: "
        },
        {
          "name": "traySizeIcon",
          "description": "`traySizeIcon` {`string`} - \n\nProperty: traySizeIcon\n\nDefault: hax:arrow-expand-right"
        },
        {
          "name": "element-align",
          "description": "`element-align` {`string`} - Alignment of the initial edit button\n\nProperty: elementAlign\n\nDefault: right"
        },
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "onhax-insert-content-array",
          "description": "`hax-insert-content-array` {`CustomEvent<any>`} - "
        },
        {
          "name": "onhax-insert-content",
          "description": "`hax-insert-content` {`CustomEvent<any>`} - "
        },
        {
          "name": "onhax-register-core-piece",
          "description": "`hax-register-core-piece` {`CustomEvent<{ piece: string; object: this; }>`} - "
        },
        {
          "name": "onhax-add-voice-command",
          "description": "`hax-add-voice-command` {`CustomEvent<{ command: string; context: any; callback: string; }>`} - "
        },
        {
          "name": "onhax-context-item-selected",
          "description": "`hax-context-item-selected` {`CustomEvent<{ eventName: any; value: any; }>`} - "
        },
        {
          "name": "onsimple-modal-hide",
          "description": "`simple-modal-hide` {`CustomEvent<{}>`} - "
        },
        {
          "name": "onhax-save",
          "description": "`hax-save` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "hax-ui-styles",
      "description": "an empty wrapper to ensure modal content has the same base styles\n\n",
      "attributes": []
    },
    {
      "name": "hax-upload-field",
      "description": "Events:\n\n  * `click` {`CustomEvent<any>`} - \n\n  * `value-changed` {`CustomEvent<{ value: any; }>`} - \n\n  * `upload-before` {`CustomEvent<any>`} - \n\n  * `upload-response` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `t` - \n\n  * `accept` {`string`} - Hint for expected file type in file upload controls\n\n  * `autofocus` {`boolean`} - Automatically focus on field when the page is loaded\n\n  * `value` {`string`} - \n\n  * `option` {`string`} - \n\n  * `autocomplete` {`string`} - Hint for form autofill feature\n\n  * `no-camera` {`boolean`} - Used when we want to ensure there is not a web cam option like video upload.\n\n  * `no-voice-record` {`boolean`} - No Voice Recording\n\n  * `disabled` {`boolean`} - whether the tabbed interface is disabled\n\n  * `error` {`boolean`} - whether fieldset has fields with errors\n\n  * `hidden` {`boolean`} - whether the tabbed interface is hidden\n\n  * `readonly` {`boolean`} - whether the tabbed interface is hidden\n\n  * `label` {`string`} - fieldset legend\n\n  * `name` {`string`} - unique name\n\n  * `description` {`string`} - optional description\n\nProperties:\n\n  * `__winEvents` - \n\n  * `t` - \n\n  * `accept` {`string`} - Hint for expected file type in file upload controls\n\n  * `autofocus` {`boolean`} - Automatically focus on field when the page is loaded\n\n  * `value` {`string`} - \n\n  * `option` {`string`} - \n\n  * `field` - \n\n  * `autocomplete` {`string`} - Hint for form autofill feature\n\n  * `noCamera` {`boolean`} - Used when we want to ensure there is not a web cam option like video upload.\n\n  * `noVoiceRecord` {`boolean`} - No Voice Recording\n\n  * `legend` {`TemplateResult<1>`} - \n\n  * `desc` {`TemplateResult<1>`} - \n\n  * `fields` {`TemplateResult<1>`} - LitElement life cycle - render callback\n\n  * `disabled` {`boolean`} - whether the tabbed interface is disabled\n\n  * `error` {`boolean`} - whether fieldset has fields with errors\n\n  * `hidden` {`boolean`} - whether the tabbed interface is hidden\n\n  * `readonly` {`boolean`} - whether the tabbed interface is hidden\n\n  * `label` {`string`} - fieldset legend\n\n  * `name` {`string`} - unique name\n\n  * `description` {`string`} - optional description",
      "attributes": [
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "accept",
          "description": "`accept` {`string`} - Hint for expected file type in file upload controls\n\nProperty: accept"
        },
        {
          "name": "autofocus",
          "description": "`autofocus` {`boolean`} - Automatically focus on field when the page is loaded\n\nProperty: autofocus",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "`value` {`string`} - \n\nProperty: value"
        },
        {
          "name": "option",
          "description": "`option` {`string`} - \n\nProperty: option"
        },
        {
          "name": "autocomplete",
          "description": "`autocomplete` {`string`} - Hint for form autofill feature\n\nProperty: autocomplete\n\nDefault: on"
        },
        {
          "name": "no-camera",
          "description": "`no-camera` {`boolean`} - Used when we want to ensure there is not a web cam option like video upload.\n\nProperty: noCamera\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "no-voice-record",
          "description": "`no-voice-record` {`boolean`} - No Voice Recording\n\nProperty: noVoiceRecord\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - whether the tabbed interface is disabled\n\nProperty: disabled",
          "valueSet": "v"
        },
        {
          "name": "error",
          "description": "`error` {`boolean`} - whether fieldset has fields with errors\n\nProperty: error",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "`hidden` {`boolean`} - whether the tabbed interface is hidden\n\nProperty: hidden",
          "valueSet": "v"
        },
        {
          "name": "readonly",
          "description": "`readonly` {`boolean`} - whether the tabbed interface is hidden\n\nProperty: readonly",
          "valueSet": "v"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - fieldset legend\n\nProperty: label"
        },
        {
          "name": "name",
          "description": "`name` {`string`} - unique name\n\nProperty: name"
        },
        {
          "name": "description",
          "description": "`description` {`string`} - optional description\n\nProperty: description"
        },
        {
          "name": "onclick",
          "description": "`click` {`CustomEvent<any>`} - "
        },
        {
          "name": "onvalue-changed",
          "description": "`value-changed` {`CustomEvent<{ value: any; }>`} - "
        },
        {
          "name": "onupload-before",
          "description": "`upload-before` {`CustomEvent<any>`} - "
        },
        {
          "name": "onupload-response",
          "description": "`upload-response` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "hax-eview-source",
      "description": "`hax-eview-source`\n\nEvents:\n\n  * `hax-register-core-piece` {`CustomEvent<{ piece: string; object: this; }>`} - \n\nAttributes:\n\n  * `globalPreferences` - Global preferences for HAX overall\n\n  * `theme` {`string`} - \n\n  * `t` - \n\nProperties:\n\n  * `globalPreferences` - Global preferences for HAX overall\n\n  * `theme` {`string`} - \n\n  * `fileTypes` - \n\n  * `t` - ",
      "attributes": [
        {
          "name": "globalPreferences",
          "description": "`globalPreferences` - Global preferences for HAX overall\n\nProperty: globalPreferences"
        },
        {
          "name": "theme",
          "description": "`theme` {`string`} - \n\nProperty: theme"
        },
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "onhax-register-core-piece",
          "description": "`hax-register-core-piece` {`CustomEvent<{ piece: string; object: this; }>`} - "
        }
      ]
    },
    {
      "name": "hax-view-source",
      "description": "`hax-eview-source`\n\nEvents:\n\n  * `hax-register-core-piece` {`CustomEvent<{ piece: string; object: this; }>`} - \n\nAttributes:\n\n  * `globalPreferences` - Global preferences for HAX overall\n\n  * `theme` {`string`} - \n\n  * `t` - \n\nProperties:\n\n  * `globalPreferences` - Global preferences for HAX overall\n\n  * `theme` {`string`} - \n\n  * `fileTypes` - \n\n  * `t` - ",
      "attributes": [
        {
          "name": "globalPreferences",
          "description": "`globalPreferences` - Global preferences for HAX overall\n\nProperty: globalPreferences"
        },
        {
          "name": "theme",
          "description": "`theme` {`string`} - \n\nProperty: theme"
        },
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "onhax-register-core-piece",
          "description": "`hax-register-core-piece` {`CustomEvent<{ piece: string; object: this; }>`} - "
        }
      ]
    },
    {
      "name": "hax-body",
      "description": "`hax-body`\nManager of the body area that can be modified\n\n### Styling\n`<hax-bodys>` provides following custom properties\nfor styling:\n\nCustom property | Description | Default\n----------------|-------------|--------\n--haxcms-base-styles-body-font-size |   | 16px\n--haxcms-base-styles-body-font-family, 'Noto Serif' |   | serif\n--haxcms-base-styles-body-line-height |   | 1.8\n--haxcms-base-styles-body-letter-spacing |   | .5px\n--hax-ui-headings |   | #d4ff77;\n--hax-color-text | default text color | #000\n--hax-contextual-action-text-color |  | --simple-colors-default-theme-grey-1\n--hax-contextual-action-color |  | --simple-colors-default-theme-cyan-7\n--hax-contextual-action-hover-color |  | \n--hax-body-target-background-color: --simple-colors-default-theme-cyan-2\n--hax-body-possible-target-background-color: --simple-colors-default-theme-grey-2\n\n####Outlines\nCustom property | Description | Default\n----------------|-------------|--------\n--hax-body-editable-outline |   | 1px solid --simple-colors-default-theme-deep-orange\n--hax-body-active-outline-hover: 1px solid --hax-contextual-action-color\n--hax-body-active-outline: 3px solid  --hax-contextual-action-color\n\n####Headings\nCustom property | Description | Default\n----------------|-------------|--------\n--hax-base-styles-h1-font-size |   | 2.5em\n--hax-base-styles-h1-line-height |   | 2.5em\n--hax-base-styles-h2-font-size |   | 2em\n--hax-base-styles-h3-font-size |   | 1.75em\n--hax-base-styles-h4-font-size |   | 1.5em\n--hax-base-styles-h5-font-size |   | 1.25em\n--hax-base-styles-h6-font-size |   | 1.25em\n--hax-base-styles-p-min-height |   | 43px\n--hax-base-styles-p-font-size |   | 24px\n--hax-base-styles-p-line-height |   | 1.8\n--hax-base-styles-p-letter-spacing |   | 0.5px\n\n####Links\nCustom property | Description | Default\n----------------|-------------|--------\n--hax-base-styles-a-color |  | --simple-colors-default-theme-grey-12\n--hax-base-styles-a-font-size |   | 24px\n--hax-base-styles-a-font-weight |   | normal\n--hax-base-styles-a-color-visited |   | --simple-colors-default-theme-light-blue\n--hax-base-styles-a-color-active |   | --simple-colors-default-theme-light-blue\n--hax-base-styles-a-font-weight-active |   | normal\n\n####Lists\nCustom property | Description | Default\n----------------|-------------|--------\n--hax-base-styles-list-padding-bottom |   | 1.5em\n--hax-base-styles-list-line-height |   | 40px\n--hax-base-styles-list-font-size |   | 24px\n--hax-base-styles-list-last-child-padding-bottom |   | 1em\n--hax-base-styles-list-padding-left |   | 20px\n--hax-base-styles-list-margin-left |   | 20px\n\nEvents:\n\n  * `hax-register-body` {`CustomEvent<this>`} - \n\n  * `place-holder-file-drop` {`CustomEvent<any>`} - \n\n  * `hax-drop-focus-event` {`CustomEvent<any>`} - \n\n  * `stack-changed` {`CustomEvent<{ value: Undo; }>`} - \n\n  * `can-undo-changed` {`CustomEvent<{ value: any; }>`} - \n\n  * `can-redo-changed` {`CustomEvent<{ value: any; }>`} - \n\nAttributes:\n\n  * `element-align` {`string`} - element align\n\n  * `tray-detail` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\n  * `tray-status` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\n  * `viewSourceToggle` {`boolean`} - Is active node in view source mode?\n\n  * `edit-mode` {`boolean`} - State of if we are editing or not.\n\n  * `hax-mover` {`boolean`} - \n\n  * `activeNode` - A reference to the active node in the slot.\n\n  * `t` - \n\n  * `can-undo` {`boolean`} - If we can currently undo based on stack position\n\n  * `can-redo` {`boolean`} - If we can currently redo based on stack position\n\n  * `target` - Allow for targetting OTHER elements w/ this behavior\n\n  * `stack` - The undo stack order\n\n  * `undoStackObserverProps` - Properties for the mutation observer\n\n  * `accent-color` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\n  * `dark` {`boolean`} - make the default theme dark?\n\nProperties:\n\n  * `elementAlign` {`string`} - element align\n\n  * `trayDetail` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\n  * `trayStatus` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\n  * `__ignoreActive` {`boolean`} - \n\n  * `__dragMoving` {`boolean`} - \n\n  * `___moveLock` {`boolean`} - \n\n  * `viewSourceToggle` {`boolean`} - Is active node in view source mode?\n\n  * `editMode` {`boolean`} - State of if we are editing or not.\n\n  * `haxMover` {`boolean`} - \n\n  * `activeNode` - A reference to the active node in the slot.\n\n  * `t` - \n\n  * `canUndo` {`boolean`} - If we can currently undo based on stack position\n\n  * `canRedo` {`boolean`} - If we can currently redo based on stack position\n\n  * `target` - Allow for targetting OTHER elements w/ this behavior\n\n  * `stack` - The undo stack order\n\n  * `undoStackLimit` {`number`} - \n\n  * `undoStackTimer` {`number`} - \n\n  * `undoStackIgnore` {`boolean`} - \n\n  * `undoStackObserver` - \n\n  * `undoStackObserverProps` - Properties for the mutation observer\n\n  * `undoStackInitialValue` - \n\n  * `undoStackPrevValue` - \n\n  * `accentColor` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\n  * `dark` {`boolean`} - make the default theme dark?\n\n  * `colors` - ",
      "attributes": [
        {
          "name": "element-align",
          "description": "`element-align` {`string`} - element align\n\nProperty: elementAlign"
        },
        {
          "name": "tray-detail",
          "description": "`tray-detail` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\nProperty: trayDetail"
        },
        {
          "name": "tray-status",
          "description": "`tray-status` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\nProperty: trayStatus"
        },
        {
          "name": "viewSourceToggle",
          "description": "`viewSourceToggle` {`boolean`} - Is active node in view source mode?\n\nProperty: viewSourceToggle\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "edit-mode",
          "description": "`edit-mode` {`boolean`} - State of if we are editing or not.\n\nProperty: editMode\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "hax-mover",
          "description": "`hax-mover` {`boolean`} - \n\nProperty: haxMover\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "activeNode",
          "description": "`activeNode` - A reference to the active node in the slot.\n\nProperty: activeNode\n\nDefault: null"
        },
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "can-undo",
          "description": "`can-undo` {`boolean`} - If we can currently undo based on stack position\n\nProperty: canUndo",
          "valueSet": "v"
        },
        {
          "name": "can-redo",
          "description": "`can-redo` {`boolean`} - If we can currently redo based on stack position\n\nProperty: canRedo",
          "valueSet": "v"
        },
        {
          "name": "target",
          "description": "`target` - Allow for targetting OTHER elements w/ this behavior\n\nProperty: target"
        },
        {
          "name": "stack",
          "description": "`stack` - The undo stack order\n\nProperty: stack"
        },
        {
          "name": "undoStackObserverProps",
          "description": "`undoStackObserverProps` - Properties for the mutation observer\n\nProperty: undoStackObserverProps\n\nDefault: [object Object]"
        },
        {
          "name": "accent-color",
          "description": "`accent-color` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\nProperty: accentColor\n\nDefault: grey"
        },
        {
          "name": "dark",
          "description": "`dark` {`boolean`} - make the default theme dark?\n\nProperty: dark\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "onhax-register-body",
          "description": "`hax-register-body` {`CustomEvent<this>`} - "
        },
        {
          "name": "onplace-holder-file-drop",
          "description": "`place-holder-file-drop` {`CustomEvent<any>`} - "
        },
        {
          "name": "onhax-drop-focus-event",
          "description": "`hax-drop-focus-event` {`CustomEvent<any>`} - "
        },
        {
          "name": "onstack-changed",
          "description": "`stack-changed` {`CustomEvent<{ value: Undo; }>`} - "
        },
        {
          "name": "oncan-undo-changed",
          "description": "`can-undo-changed` {`CustomEvent<{ value: any; }>`} - "
        },
        {
          "name": "oncan-redo-changed",
          "description": "`can-redo-changed` {`CustomEvent<{ value: any; }>`} - "
        }
      ]
    }
  ],
  "globalAttributes": [],
  "valueSets": []
}
