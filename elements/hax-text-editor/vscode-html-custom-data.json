{
  "version": 1,
  "tags": [
    {
      "name": "hax-text-editor",
      "description": "`hax-text-editor`\n`HAX-specific implementation of rich-text-editor`\n\nEvents:\n\n  * `editing-disabled` {`CustomEvent<any>`} - \n\n  * `editing-enabled` {`CustomEvent<any>`} - \n\n  * `focus` {`CustomEvent<any>`} - \n\n  * `register` {`CustomEvent<{ remove: boolean; editor: this; }>`} - \n\n  * `getrange` {`CustomEvent<this>`} - \n\n  * `pastefromclipboard` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `disable-hover` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `rawhtml` {`string`} - raw html\n\n  * `updateRange` {`boolean`} - whether to update range\n\n  * `view-source` {`boolean`} - whether editor is view source code mode\n\n  * `__canceledEdits` - contains cancelled edits\n\n  * `__connectedToolbar` - connected toolbar\n\n  * `__codeEditorValue` {`string`} - code-editor for view source\n\n  * `__needsUpdate` {`boolean`} - has focus\n\n  * `placeholder` {`string`} - Placeholder text for empty editable regions\n\n  * `toolbar` {`string`} - id for toolbar\n\n  * `type` {`string`} - type of editor toolbar, i.e.\nfull - full for full toolbar with breadcrumb,\nmini - mini for mini floating toolbar, or\ndefault toolbar if neither.\n\n  * `id` {`string`} - editor's unique id\n\n  * `range` - current range\n\n  * `__focused` {`boolean`} - has focus\n\n  * `__hovered` {`boolean`} - is hovered\n\n  * `editing` {`boolean`} - Maps to editing attribute\n\n  * `__selection` - selection management\n\nProperties:\n\n  * `haxUIElement` {`boolean`} - \n\n  * `tag` {`string`} - \n\n  * `disableHover` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `rawhtml` {`string`} - raw html\n\n  * `updateRange` {`boolean`} - whether to update range\n\n  * `viewSource` {`boolean`} - whether editor is view source code mode\n\n  * `__canceledEdits` - contains cancelled edits\n\n  * `__connectedToolbar` - connected toolbar\n\n  * `__codeEditorValue` {`string`} - code-editor for view source\n\n  * `__needsUpdate` {`boolean`} - has focus\n\n  * `observer` {`MutationObserver`} - mutation observer\n\n  * `placeholder` {`string`} - Placeholder text for empty editable regions\n\n  * `toolbar` {`string`} - id for toolbar\n\n  * `type` {`string`} - type of editor toolbar, i.e.\nfull - full for full toolbar with breadcrumb,\nmini - mini for mini floating toolbar, or\ndefault toolbar if neither.\n\n  * `id` {`string`} - editor's unique id\n\n  * `range` - current range\n\n  * `__focused` {`boolean`} - has focus\n\n  * `__hovered` {`boolean`} - is hovered\n\n  * `editing` {`boolean`} - Maps to editing attribute\n\n  * `__selection` - selection management",
      "attributes": [
        {
          "name": "disable-hover",
          "description": "`disable-hover` {`boolean`} - don't reveal toolbar on mouseover\n\nProperty: disableHover",
          "valueSet": "v"
        },
        {
          "name": "rawhtml",
          "description": "`rawhtml` {`string`} - raw html\n\nProperty: rawhtml"
        },
        {
          "name": "updateRange",
          "description": "`updateRange` {`boolean`} - whether to update range\n\nProperty: updateRange",
          "valueSet": "v"
        },
        {
          "name": "view-source",
          "description": "`view-source` {`boolean`} - whether editor is view source code mode\n\nProperty: viewSource",
          "valueSet": "v"
        },
        {
          "name": "__canceledEdits",
          "description": "`__canceledEdits` - contains cancelled edits\n\nProperty: __canceledEdits"
        },
        {
          "name": "__connectedToolbar",
          "description": "`__connectedToolbar` - connected toolbar\n\nProperty: __connectedToolbar"
        },
        {
          "name": "__codeEditorValue",
          "description": "`__codeEditorValue` {`string`} - code-editor for view source\n\nProperty: __codeEditorValue"
        },
        {
          "name": "__needsUpdate",
          "description": "`__needsUpdate` {`boolean`} - has focus\n\nProperty: __needsUpdate",
          "valueSet": "v"
        },
        {
          "name": "placeholder",
          "description": "`placeholder` {`string`} - Placeholder text for empty editable regions\n\nProperty: placeholder\n\nDefault: Click to edit"
        },
        {
          "name": "toolbar",
          "description": "`toolbar` {`string`} - id for toolbar\n\nProperty: toolbar\n\nDefault: "
        },
        {
          "name": "type",
          "description": "`type` {`string`} - type of editor toolbar, i.e.\nfull - full for full toolbar with breadcrumb,\nmini - mini for mini floating toolbar, or\ndefault toolbar if neither.\n\nProperty: type\n\nDefault: hax-text-editor-toolbar"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - editor's unique id\n\nProperty: id\n\nDefault: "
        },
        {
          "name": "range",
          "description": "`range` - current range\n\nProperty: range\n\nDefault: undefined"
        },
        {
          "name": "__focused",
          "description": "`__focused` {`boolean`} - has focus\n\nProperty: __focused\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__hovered",
          "description": "`__hovered` {`boolean`} - is hovered\n\nProperty: __hovered\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "editing",
          "description": "`editing` {`boolean`} - Maps to editing attribute\n\nProperty: editing\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__selection",
          "description": "`__selection` - selection management\n\nProperty: __selection"
        },
        {
          "name": "onediting-disabled",
          "description": "`editing-disabled` {`CustomEvent<any>`} - "
        },
        {
          "name": "onediting-enabled",
          "description": "`editing-enabled` {`CustomEvent<any>`} - "
        },
        {
          "name": "onfocus",
          "description": "`focus` {`CustomEvent<any>`} - "
        },
        {
          "name": "onregister",
          "description": "`register` {`CustomEvent<{ remove: boolean; editor: this; }>`} - "
        },
        {
          "name": "ongetrange",
          "description": "`getrange` {`CustomEvent<this>`} - "
        },
        {
          "name": "onpastefromclipboard",
          "description": "`pastefromclipboard` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "hax-text-editor-toolbar",
      "attributes": []
    },
    {
      "name": "hax-text-editor",
      "attributes": []
    },
    {
      "name": "hax-text-editor-toolbar",
      "description": "`hax-text-editor-toolbar`\n`A customized toolbar (with buttons) for HAX`\n\n",
      "attributes": []
    },
    {
      "name": "hax-text-editor-button",
      "description": "`hax-text-editor-button`\n\nEvents:\n\n  * `rich-text-editor-prompt-closed` {`CustomEvent<this>`} - \n\n  * `rich-text-editor-prompt-open` {`CustomEvent<this>`} - \n\n  * `highlight` {`CustomEvent<boolean>`} - \n\n  * `highlightnode` {`CustomEvent<any>`} - \n\n  * `selectrange` {`CustomEvent<any>`} - \n\n  * `selectnode` {`CustomEvent<any>`} - \n\n  * `selectnodeccontents` {`CustomEvent<any>`} - \n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: string; commandVal: string; range: any; button: this; }>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<{ button: this; }>`} - \n\nAttributes:\n\n  * `element` - \n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `fields` {`any[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `prompt` - prompt that pops up when button is pressed\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `__selection` - highlight surrounding selected range\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperties:\n\n  * `element` - \n\n  * `tag` {`string`} - \n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `promptCommand` - determines which command based on values passed from prompt\n(can be overriden for custom prompt  commands)\n\n  * `promptCommandVal` {`string`} - determines commandVal based on values passed from prompt\n\n  * `setsInnerHTML` {`boolean`} - determines if prompt also sets innerHTML of range\n(can be overriden for custom prompts)\n\n  * `editableSelection` {`boolean`} - \n\n  * `fields` {`any[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `prompt` - prompt that pops up when button is pressed\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `range` - The active selected range, inherited from the toolbar\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `tagsArray` {`string[]`} - tagslist as an array\n\n  * `__selection` - highlight surrounding selected range\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `labelStyle` {`\"offscreen\" | null`} - label is offscreen (screenreader-only)\n\n  * `isToggled` {`boolean`} - whether button is toggled\n\n  * `iconTemplate` {`TemplateResult`} - \n\n  * `labelTemplate` {`TemplateResult`} - \n\n  * `tooltipTemplate` {`TemplateResult`} - \n\n  * `buttonTemplate` {`TemplateResult`} - \n\n  * `disabled` {`boolean`} - Is the button disabled? Default is false.\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys",
      "attributes": [
        {
          "name": "element",
          "description": "`element` - \n\nProperty: element"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - is element a custom inline widget element?\n\nProperty: id"
        },
        {
          "name": "__wrap",
          "description": "`__wrap` - contents node inside selected range\n\nProperty: __wrap"
        },
        {
          "name": "__oldValue",
          "description": "`__oldValue` - contents node inside selected range\n\nProperty: __oldValue"
        },
        {
          "name": "fields",
          "description": "`fields` {`any[]`} - fields for prompt popover.\n\nProperty: fields\n\nDefault: [object Object]"
        },
        {
          "name": "value",
          "description": "`value` - prefilled value of prompt\n\nProperty: value\n\nDefault: [object Object]"
        },
        {
          "name": "prompt",
          "description": "`prompt` - prompt that pops up when button is pressed\n\nProperty: prompt"
        },
        {
          "name": "command",
          "description": "`command` {`string`} - The command used for document.execCommand.\n\nProperty: command\n\nDefault: insertHTML"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "range",
          "description": "`range` - The active selected range, inherited from the toolbar\n\nProperty: range"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "__selection",
          "description": "`__selection` - highlight surrounding selected range\n\nProperty: __selection"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: span"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional iron icon name for the button.\n\nProperty: icon"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled",
          "valueSet": "v"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Is the button disabled? Default is false.\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "onrich-text-editor-prompt-closed",
          "description": "`rich-text-editor-prompt-closed` {`CustomEvent<this>`} - "
        },
        {
          "name": "onrich-text-editor-prompt-open",
          "description": "`rich-text-editor-prompt-open` {`CustomEvent<this>`} - "
        },
        {
          "name": "onhighlight",
          "description": "`highlight` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onhighlightnode",
          "description": "`highlightnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectrange",
          "description": "`selectrange` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnode",
          "description": "`selectnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnodeccontents",
          "description": "`selectnodeccontents` {`CustomEvent<any>`} - "
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: string; commandVal: string; range: any; button: this; }>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<{ button: this; }>`} - "
        }
      ]
    },
    {
      "name": "hax-text-editor-toolbar",
      "description": "`hax-text-editor-toolbar`\n`A customized toolbar (with buttons) for HAX`\n\nEvents:\n\n  * `cancel` {`CustomEvent<this>`} - \n\n  * `disableediting` {`CustomEvent<this>`} - \n\n  * `highlight` {`CustomEvent<boolean>`} - \n\n  * `register` {`CustomEvent<{ remove: boolean; toolbar: this; }>`} - \n\n  * `setrange` {`CustomEvent<{ editor: any; range: any; }>`} - \n\n  * `selectnode` {`CustomEvent<any>`} - \n\n  * `selectnodecontents` {`CustomEvent<any>`} - \n\n  * `selectrange` {`CustomEvent<any>`} - \n\n  * `pastefromclipboard` {`CustomEvent<any>`} - \n\n  * `shortcut-key-pressed` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `editor` - `rich-text-editor` element that is currently in `editing` mode\n\n  * `savedSelection` - current text selected range.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `registered` {`boolean`} - selection singleton\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to an\n\n  * `paste-disabled` {`boolean`} - hides paste button in Firefox\n\n  * `__promptOpen` {`boolean`} - whether prompt is open\n\n  * `__selection` - selection singleton\n\n  * `clickableElements` - Tracks inline widgets that require selection data\n\n  * `breadcrumbs-label` {`string`} - The label for the breadcrums area.\n\n  * `breadcrumbs-select-all-label` {`string`} - The label for the breadcrums area.\n\n  * `id` {`string`} - `rich-text-editor` unique id\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `config` {`{}[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `__buttons` {`any[]`} - raw array of buttons\n\n  * `__collapseDisabled` {`boolean`} - whether there is no need to collapse\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `more-icon` {`string`} - icon for more button.\n\n  * `more-label` {`string`} - label for more button.\n\n  * `more-label-toggled` {`string`} - label for more button when toggled.\n\n  * `more-show-text-label` {`boolean`} - show text label for more button.\n\n  * `more-shortcut` {`boolean`} - show text label for more button.\n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `shoertcut-keys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperties:\n\n  * `HaxEditConfig` {`{ type: string; buttons: { type: string; }[]; }[]`} - \n\n  * `lrnVocabButton` {`{ element: typeof LrnVocab; type: string; }`} - \n\n  * `LrnMathButton` {`{ element: typeof LrnMath; type: string; }`} - \n\n  * `OerSchemaElementButton` {`{ element: typeof OerSchemaElement; type: string; }`} - \n\n  * `widgetButtonGroup` {`{ type: string; buttons: ({ element: typeof LrnVocab; type: string; } | { element: typeof LrnMath; type: string; } | { element: typeof OerSchemaElement; type: string; })[]; }`} - \n\n  * `tag` {`string`} - \n\n  * `hasBreadcrumbs` {`boolean`} - \n\n  * `undoButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - \n\n  * `redoButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - \n\n  * `historyButtonGroup` {`{ type: string; buttons: { command: string; icon: string; label: string; shortcutKeys: string; type: string; }[]; }`} - \n\n  * `formatButton` {`{ label: string; type: string; }`} - \n\n  * `boldButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; toggles: boolean; type: string; }`} - \n\n  * `italicButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; toggles: boolean; type: string; }`} - \n\n  * `underlineButton` {`{ type: string; }`} - \n\n  * `removeFormatButton` {`{ command: string; icon: string; label: string; type: string; }`} - \n\n  * `basicInlineButtonGroup` {`{ type: string; buttons: { label: string; type: string; }[]; }`} - \n\n  * `linkButton` {`{ icon: string; label: string; shortcutKeys: string; type: string; }`} - \n\n  * `linkButtonGroup` {`{ type: string; buttons: { icon: string; label: string; shortcutKeys: string; type: string; }[]; }`} - \n\n  * `cutButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - \n\n  * `copyButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - \n\n  * `pasteButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - \n\n  * `clipboardButtonGroup` {`{ type: string; buttons: { command: string; icon: string; label: string; shortcutKeys: string; type: string; }[]; }`} - \n\n  * `subscriptButton` {`{ command: string; icon: string; label: string; toggles: boolean; type: string; }`} - \n\n  * `superscriptButton` {`{ command: string; icon: string; label: string; toggles: boolean; type: string; }`} - \n\n  * `scriptButtonGroup` {`{ type: string; buttons: { command: string; icon: string; label: string; toggles: boolean; type: string; }[]; }`} - \n\n  * `symbolButton` {`{ symbolTypes: string[]; type: string; }`} - \n\n  * `emojiButton` {`{ type: string; }`} - \n\n  * `imageButton` {`{ type: string; }`} - \n\n  * `insertButtonGroup` {`{ type: string; buttons: { type: string; }[]; }`} - \n\n  * `orderedListButton` {`{ command: string; icon: string; label: string; toggles: boolean; type: string; }`} - \n\n  * `unorderedListButton` {`{ command: string; icon: string; label: string; toggles: boolean; type: string; }`} - \n\n  * `blockquoteButton` {`{ command: string; commandVal: string; label: string; icon: string; shortcutKeys: string; type: string; }`} - \n\n  * `indentButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - \n\n  * `outdentButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - \n\n  * `listIndentButtonGroup` {`{ type: string; buttons: ({ command: string; icon: string; label: string; toggles: boolean; type: string; } | { command: string; icon: string; label: string; shortcutKeys: string; type: string; })[]; }`} - \n\n  * `saveButton` {`{ command: string; icon: string; label: string; type: string; }`} - \n\n  * `closeButton` {`{ command: string; icon: string; label: string; type: string; }`} - \n\n  * `saveCloseButtonGroup` {`{ type: string; buttons: { command: string; icon: string; label: string; type: string; }[]; }`} - \n\n  * `sourceButton` {`{ type: string; }`} - \n\n  * `sourceButtonGroup` {`{ type: string; buttons: { type: string; }[]; }`} - \n\n  * `defaultConfig` {`{ type: string; buttons: { type: string; }[]; }[]`} - \n\n  * `miniConfig` {`({ type: string; buttons: { icon: string; label: string; shortcutKeys: string; type: string; }[]; } | { type: string; buttons: { command: string; icon: string; label: string; type: string; }[]; })[]`} - \n\n  * `miniTemplate` {`TemplateResult`} - \n\n  * `editor` - `rich-text-editor` element that is currently in `editing` mode\n\n  * `savedSelection` - current text selected range.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `registered` {`boolean`} - selection singleton\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to an\n\n  * `__pasteDisabled` {`boolean`} - hides paste button in Firefox\n\n  * `__promptOpen` {`boolean`} - whether prompt is open\n\n  * `__selection` - selection singleton\n\n  * `controls` - id of editor currently being controlled\n\n  * `disconnected` - \n\n  * `noSelection` - \n\n  * `clickableElements` - Tracks inline widgets that require selection data\n\n  * `breadcrumbsLabel` {`string`} - The label for the breadcrums area.\n\n  * `breadcrumbsSelectAllLabel` {`string`} - The label for the breadcrums area.\n\n  * `id` {`string`} - `rich-text-editor` unique id\n\n  * `buttons` {`any[]`} - array of rendered buttons\n\n  * `focused` {`boolean`} - does toolbar have focus\n\n  * `hovered` {`boolean`} - is mouseover toolbar\n\n  * `moreButton` {`TemplateResult`} - more button's template\n\n  * `toolbarTemplate` {`TemplateResult`} - toolbar element's template\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `config` {`{}[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `__buttons` {`any[]`} - raw array of buttons\n\n  * `__collapseDisabled` {`boolean`} - whether there is no need to collapse\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `moreIcon` {`string`} - icon for more button.\n\n  * `moreLabel` {`string`} - label for more button.\n\n  * `moreLabelToggled` {`string`} - label for more button when toggled.\n\n  * `moreShowTextLabel` {`boolean`} - show text label for more button.\n\n  * `moreShortcut` {`boolean`} - show text label for more button.\n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `shortcutKeys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.",
      "attributes": [
        {
          "name": "editor",
          "description": "`editor` - `rich-text-editor` element that is currently in `editing` mode\n\nProperty: editor"
        },
        {
          "name": "savedSelection",
          "description": "`savedSelection` - current text selected range.\n\nProperty: savedSelection"
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "registered",
          "description": "`registered` {`boolean`} - selection singleton\n\nProperty: registered",
          "valueSet": "v"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "show",
          "description": "`show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to an\n\nProperty: show"
        },
        {
          "name": "paste-disabled",
          "description": "`paste-disabled` {`boolean`} - hides paste button in Firefox\n\nProperty: __pasteDisabled",
          "valueSet": "v"
        },
        {
          "name": "__promptOpen",
          "description": "`__promptOpen` {`boolean`} - whether prompt is open\n\nProperty: __promptOpen",
          "valueSet": "v"
        },
        {
          "name": "__selection",
          "description": "`__selection` - selection singleton\n\nProperty: __selection"
        },
        {
          "name": "clickableElements",
          "description": "`clickableElements` - Tracks inline widgets that require selection data\n\nProperty: clickableElements\n\nDefault: [object Object]"
        },
        {
          "name": "breadcrumbs-label",
          "description": "`breadcrumbs-label` {`string`} - The label for the breadcrums area.\n\nProperty: breadcrumbsLabel\n\nDefault: Select"
        },
        {
          "name": "breadcrumbs-select-all-label",
          "description": "`breadcrumbs-select-all-label` {`string`} - The label for the breadcrums area.\n\nProperty: breadcrumbsSelectAllLabel\n\nDefault: All"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - `rich-text-editor` unique id\n\nProperty: id"
        },
        {
          "name": "collapsed",
          "description": "`collapsed` {`boolean`} - is toolbar collapsed?\n\nProperty: collapsed\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "config",
          "description": "`config` {`{}[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\nProperty: config\n\nDefault: [object Object],[object Object],[object Object],[object Object],[object Object],[object Object]"
        },
        {
          "name": "__buttons",
          "description": "`__buttons` {`any[]`} - raw array of buttons\n\nProperty: __buttons\n\nDefault: "
        },
        {
          "name": "__collapseDisabled",
          "description": "`__collapseDisabled` {`boolean`} - whether there is no need to collapse\n\nProperty: __collapseDisabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__focused",
          "description": "`__focused` {`boolean`} - whether toolbar has focus\n\nProperty: __focused\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__hovered",
          "description": "`__hovered` {`boolean`} - whether toolbar is hovered\n\nProperty: __hovered\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "more-icon",
          "description": "`more-icon` {`string`} - icon for more button.\n\nProperty: moreIcon\n\nDefault: more-vert"
        },
        {
          "name": "more-label",
          "description": "`more-label` {`string`} - label for more button.\n\nProperty: moreLabel\n\nDefault: More Buttons"
        },
        {
          "name": "more-label-toggled",
          "description": "`more-label-toggled` {`string`} - label for more button when toggled.\n\nProperty: moreLabelToggled\n\nDefault: Fewer Buttons"
        },
        {
          "name": "more-show-text-label",
          "description": "`more-show-text-label` {`boolean`} - show text label for more button.\n\nProperty: moreShowTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "more-shortcut",
          "description": "`more-shortcut` {`boolean`} - show text label for more button.\n\nProperty: moreShortcut\n\nDefault: ctrl+shift+;",
          "valueSet": "v"
        },
        {
          "name": "sticky",
          "description": "`sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\nProperty: sticky\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shoertcut-keys",
          "description": "`shoertcut-keys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperty: shortcutKeys\n\nDefault: [object Object]"
        },
        {
          "name": "oncancel",
          "description": "`cancel` {`CustomEvent<this>`} - "
        },
        {
          "name": "ondisableediting",
          "description": "`disableediting` {`CustomEvent<this>`} - "
        },
        {
          "name": "onhighlight",
          "description": "`highlight` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onregister",
          "description": "`register` {`CustomEvent<{ remove: boolean; toolbar: this; }>`} - "
        },
        {
          "name": "onsetrange",
          "description": "`setrange` {`CustomEvent<{ editor: any; range: any; }>`} - "
        },
        {
          "name": "onselectnode",
          "description": "`selectnode` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectnodecontents",
          "description": "`selectnodecontents` {`CustomEvent<any>`} - "
        },
        {
          "name": "onselectrange",
          "description": "`selectrange` {`CustomEvent<any>`} - "
        },
        {
          "name": "onpastefromclipboard",
          "description": "`pastefromclipboard` {`CustomEvent<any>`} - "
        },
        {
          "name": "onshortcut-key-pressed",
          "description": "`shortcut-key-pressed` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "hax-text-editor",
      "description": "`hax-text-editor`\n`HAX-specific implementation of rich-text-editor`\n\n",
      "attributes": []
    },
    {
      "name": "hax-text-editor",
      "description": "`hax-text-editor`\n`HAX-specific implementation of rich-text-editor`\n\nEvents:\n\n  * `editing-disabled` {`CustomEvent<any>`} - \n\n  * `editing-enabled` {`CustomEvent<any>`} - \n\n  * `focus` {`CustomEvent<any>`} - \n\n  * `register` {`CustomEvent<{ remove: boolean; editor: this; }>`} - \n\n  * `getrange` {`CustomEvent<this>`} - \n\n  * `pastefromclipboard` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `disable-hover` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `rawhtml` {`string`} - raw html\n\n  * `updateRange` {`boolean`} - whether to update range\n\n  * `view-source` {`boolean`} - whether editor is view source code mode\n\n  * `__canceledEdits` - contains cancelled edits\n\n  * `__connectedToolbar` - connected toolbar\n\n  * `__codeEditorValue` {`string`} - code-editor for view source\n\n  * `__needsUpdate` {`boolean`} - has focus\n\n  * `placeholder` {`string`} - Placeholder text for empty editable regions\n\n  * `toolbar` {`string`} - id for toolbar\n\n  * `type` {`string`} - type of editor toolbar, i.e.\nfull - full for full toolbar with breadcrumb,\nmini - mini for mini floating toolbar, or\ndefault toolbar if neither.\n\n  * `id` {`string`} - editor's unique id\n\n  * `range` - current range\n\n  * `__focused` {`boolean`} - has focus\n\n  * `__hovered` {`boolean`} - is hovered\n\n  * `editing` {`boolean`} - Maps to editing attribute\n\n  * `__selection` - selection management\n\nProperties:\n\n  * `haxUIElement` {`boolean`} - \n\n  * `tag` {`string`} - \n\n  * `disableHover` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `rawhtml` {`string`} - raw html\n\n  * `updateRange` {`boolean`} - whether to update range\n\n  * `viewSource` {`boolean`} - whether editor is view source code mode\n\n  * `__canceledEdits` - contains cancelled edits\n\n  * `__connectedToolbar` - connected toolbar\n\n  * `__codeEditorValue` {`string`} - code-editor for view source\n\n  * `__needsUpdate` {`boolean`} - has focus\n\n  * `observer` {`MutationObserver`} - mutation observer\n\n  * `placeholder` {`string`} - Placeholder text for empty editable regions\n\n  * `toolbar` {`string`} - id for toolbar\n\n  * `type` {`string`} - type of editor toolbar, i.e.\nfull - full for full toolbar with breadcrumb,\nmini - mini for mini floating toolbar, or\ndefault toolbar if neither.\n\n  * `id` {`string`} - editor's unique id\n\n  * `range` - current range\n\n  * `__focused` {`boolean`} - has focus\n\n  * `__hovered` {`boolean`} - is hovered\n\n  * `editing` {`boolean`} - Maps to editing attribute\n\n  * `__selection` - selection management",
      "attributes": [
        {
          "name": "disable-hover",
          "description": "`disable-hover` {`boolean`} - don't reveal toolbar on mouseover\n\nProperty: disableHover",
          "valueSet": "v"
        },
        {
          "name": "rawhtml",
          "description": "`rawhtml` {`string`} - raw html\n\nProperty: rawhtml"
        },
        {
          "name": "updateRange",
          "description": "`updateRange` {`boolean`} - whether to update range\n\nProperty: updateRange",
          "valueSet": "v"
        },
        {
          "name": "view-source",
          "description": "`view-source` {`boolean`} - whether editor is view source code mode\n\nProperty: viewSource",
          "valueSet": "v"
        },
        {
          "name": "__canceledEdits",
          "description": "`__canceledEdits` - contains cancelled edits\n\nProperty: __canceledEdits"
        },
        {
          "name": "__connectedToolbar",
          "description": "`__connectedToolbar` - connected toolbar\n\nProperty: __connectedToolbar"
        },
        {
          "name": "__codeEditorValue",
          "description": "`__codeEditorValue` {`string`} - code-editor for view source\n\nProperty: __codeEditorValue"
        },
        {
          "name": "__needsUpdate",
          "description": "`__needsUpdate` {`boolean`} - has focus\n\nProperty: __needsUpdate",
          "valueSet": "v"
        },
        {
          "name": "placeholder",
          "description": "`placeholder` {`string`} - Placeholder text for empty editable regions\n\nProperty: placeholder\n\nDefault: Click to edit"
        },
        {
          "name": "toolbar",
          "description": "`toolbar` {`string`} - id for toolbar\n\nProperty: toolbar\n\nDefault: "
        },
        {
          "name": "type",
          "description": "`type` {`string`} - type of editor toolbar, i.e.\nfull - full for full toolbar with breadcrumb,\nmini - mini for mini floating toolbar, or\ndefault toolbar if neither.\n\nProperty: type\n\nDefault: hax-text-editor-toolbar"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - editor's unique id\n\nProperty: id\n\nDefault: "
        },
        {
          "name": "range",
          "description": "`range` - current range\n\nProperty: range\n\nDefault: undefined"
        },
        {
          "name": "__focused",
          "description": "`__focused` {`boolean`} - has focus\n\nProperty: __focused\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__hovered",
          "description": "`__hovered` {`boolean`} - is hovered\n\nProperty: __hovered\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "editing",
          "description": "`editing` {`boolean`} - Maps to editing attribute\n\nProperty: editing\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__selection",
          "description": "`__selection` - selection management\n\nProperty: __selection"
        },
        {
          "name": "onediting-disabled",
          "description": "`editing-disabled` {`CustomEvent<any>`} - "
        },
        {
          "name": "onediting-enabled",
          "description": "`editing-enabled` {`CustomEvent<any>`} - "
        },
        {
          "name": "onfocus",
          "description": "`focus` {`CustomEvent<any>`} - "
        },
        {
          "name": "onregister",
          "description": "`register` {`CustomEvent<{ remove: boolean; editor: this; }>`} - "
        },
        {
          "name": "ongetrange",
          "description": "`getrange` {`CustomEvent<this>`} - "
        },
        {
          "name": "onpastefromclipboard",
          "description": "`pastefromclipboard` {`CustomEvent<this>`} - "
        }
      ]
    }
  ],
  "globalAttributes": [],
  "valueSets": []
}
